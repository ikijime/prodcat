// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevariantstring"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AttributeVariantString is the model entity for the AttributeVariantString schema.
type AttributeVariantString struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AttributeID holds the value of the "attribute_id" field.
	AttributeID int `json:"attribute_id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttributeVariantStringQuery when eager-loading is set.
	Edges        AttributeVariantStringEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AttributeVariantStringEdges holds the relations/edges for other nodes in the graph.
type AttributeVariantStringEdges struct {
	// Attribute holds the value of the attribute edge.
	Attribute *Attribute `json:"attribute,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AttributeOrErr returns the Attribute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeVariantStringEdges) AttributeOrErr() (*Attribute, error) {
	if e.loadedTypes[0] {
		if e.Attribute == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: attribute.Label}
		}
		return e.Attribute, nil
	}
	return nil, &NotLoadedError{edge: "attribute"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttributeVariantString) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attributevariantstring.FieldID, attributevariantstring.FieldAttributeID:
			values[i] = new(sql.NullInt64)
		case attributevariantstring.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttributeVariantString fields.
func (avs *AttributeVariantString) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attributevariantstring.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			avs.ID = int(value.Int64)
		case attributevariantstring.FieldAttributeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_id", values[i])
			} else if value.Valid {
				avs.AttributeID = int(value.Int64)
			}
		case attributevariantstring.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				avs.Value = value.String
			}
		default:
			avs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the AttributeVariantString.
// This includes values selected through modifiers, order, etc.
func (avs *AttributeVariantString) GetValue(name string) (ent.Value, error) {
	return avs.selectValues.Get(name)
}

// QueryAttribute queries the "attribute" edge of the AttributeVariantString entity.
func (avs *AttributeVariantString) QueryAttribute() *AttributeQuery {
	return NewAttributeVariantStringClient(avs.config).QueryAttribute(avs)
}

// Update returns a builder for updating this AttributeVariantString.
// Note that you need to call AttributeVariantString.Unwrap() before calling this method if this AttributeVariantString
// was returned from a transaction, and the transaction was committed or rolled back.
func (avs *AttributeVariantString) Update() *AttributeVariantStringUpdateOne {
	return NewAttributeVariantStringClient(avs.config).UpdateOne(avs)
}

// Unwrap unwraps the AttributeVariantString entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (avs *AttributeVariantString) Unwrap() *AttributeVariantString {
	_tx, ok := avs.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttributeVariantString is not a transactional entity")
	}
	avs.config.driver = _tx.drv
	return avs
}

// String implements the fmt.Stringer.
func (avs *AttributeVariantString) String() string {
	var builder strings.Builder
	builder.WriteString("AttributeVariantString(")
	builder.WriteString(fmt.Sprintf("id=%v, ", avs.ID))
	builder.WriteString("attribute_id=")
	builder.WriteString(fmt.Sprintf("%v", avs.AttributeID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(avs.Value)
	builder.WriteByte(')')
	return builder.String()
}

// AttributeVariantStrings is a parsable slice of AttributeVariantString.
type AttributeVariantStrings []*AttributeVariantString
