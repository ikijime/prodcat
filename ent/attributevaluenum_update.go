// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prodcat/ent/attributevaluenum"
	"prodcat/ent/attributevariantnum"
	"prodcat/ent/predicate"
	"prodcat/ent/product"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeValueNumUpdate is the builder for updating AttributeValueNum entities.
type AttributeValueNumUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeValueNumMutation
}

// Where appends a list predicates to the AttributeValueNumUpdate builder.
func (avnu *AttributeValueNumUpdate) Where(ps ...predicate.AttributeValueNum) *AttributeValueNumUpdate {
	avnu.mutation.Where(ps...)
	return avnu
}

// SetVariantID sets the "variant_id" field.
func (avnu *AttributeValueNumUpdate) SetVariantID(i int) *AttributeValueNumUpdate {
	avnu.mutation.SetVariantID(i)
	return avnu
}

// SetNillableVariantID sets the "variant_id" field if the given value is not nil.
func (avnu *AttributeValueNumUpdate) SetNillableVariantID(i *int) *AttributeValueNumUpdate {
	if i != nil {
		avnu.SetVariantID(*i)
	}
	return avnu
}

// SetProductID sets the "product_id" field.
func (avnu *AttributeValueNumUpdate) SetProductID(i int) *AttributeValueNumUpdate {
	avnu.mutation.SetProductID(i)
	return avnu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (avnu *AttributeValueNumUpdate) SetNillableProductID(i *int) *AttributeValueNumUpdate {
	if i != nil {
		avnu.SetProductID(*i)
	}
	return avnu
}

// SetVariant sets the "variant" edge to the AttributeVariantNum entity.
func (avnu *AttributeValueNumUpdate) SetVariant(a *AttributeVariantNum) *AttributeValueNumUpdate {
	return avnu.SetVariantID(a.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (avnu *AttributeValueNumUpdate) SetProduct(p *Product) *AttributeValueNumUpdate {
	return avnu.SetProductID(p.ID)
}

// Mutation returns the AttributeValueNumMutation object of the builder.
func (avnu *AttributeValueNumUpdate) Mutation() *AttributeValueNumMutation {
	return avnu.mutation
}

// ClearVariant clears the "variant" edge to the AttributeVariantNum entity.
func (avnu *AttributeValueNumUpdate) ClearVariant() *AttributeValueNumUpdate {
	avnu.mutation.ClearVariant()
	return avnu
}

// ClearProduct clears the "product" edge to the Product entity.
func (avnu *AttributeValueNumUpdate) ClearProduct() *AttributeValueNumUpdate {
	avnu.mutation.ClearProduct()
	return avnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (avnu *AttributeValueNumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, avnu.sqlSave, avnu.mutation, avnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avnu *AttributeValueNumUpdate) SaveX(ctx context.Context) int {
	affected, err := avnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (avnu *AttributeValueNumUpdate) Exec(ctx context.Context) error {
	_, err := avnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avnu *AttributeValueNumUpdate) ExecX(ctx context.Context) {
	if err := avnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avnu *AttributeValueNumUpdate) check() error {
	if _, ok := avnu.mutation.VariantID(); avnu.mutation.VariantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueNum.variant"`)
	}
	if _, ok := avnu.mutation.ProductID(); avnu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueNum.product"`)
	}
	return nil
}

func (avnu *AttributeValueNumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := avnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributevaluenum.Table, attributevaluenum.Columns, sqlgraph.NewFieldSpec(attributevaluenum.FieldID, field.TypeInt))
	if ps := avnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if avnu.mutation.VariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributevaluenum.VariantTable,
			Columns: []string{attributevaluenum.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avnu.mutation.VariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributevaluenum.VariantTable,
			Columns: []string{attributevaluenum.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avnu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluenum.ProductTable,
			Columns: []string{attributevaluenum.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avnu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluenum.ProductTable,
			Columns: []string{attributevaluenum.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, avnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributevaluenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	avnu.mutation.done = true
	return n, nil
}

// AttributeValueNumUpdateOne is the builder for updating a single AttributeValueNum entity.
type AttributeValueNumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeValueNumMutation
}

// SetVariantID sets the "variant_id" field.
func (avnuo *AttributeValueNumUpdateOne) SetVariantID(i int) *AttributeValueNumUpdateOne {
	avnuo.mutation.SetVariantID(i)
	return avnuo
}

// SetNillableVariantID sets the "variant_id" field if the given value is not nil.
func (avnuo *AttributeValueNumUpdateOne) SetNillableVariantID(i *int) *AttributeValueNumUpdateOne {
	if i != nil {
		avnuo.SetVariantID(*i)
	}
	return avnuo
}

// SetProductID sets the "product_id" field.
func (avnuo *AttributeValueNumUpdateOne) SetProductID(i int) *AttributeValueNumUpdateOne {
	avnuo.mutation.SetProductID(i)
	return avnuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (avnuo *AttributeValueNumUpdateOne) SetNillableProductID(i *int) *AttributeValueNumUpdateOne {
	if i != nil {
		avnuo.SetProductID(*i)
	}
	return avnuo
}

// SetVariant sets the "variant" edge to the AttributeVariantNum entity.
func (avnuo *AttributeValueNumUpdateOne) SetVariant(a *AttributeVariantNum) *AttributeValueNumUpdateOne {
	return avnuo.SetVariantID(a.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (avnuo *AttributeValueNumUpdateOne) SetProduct(p *Product) *AttributeValueNumUpdateOne {
	return avnuo.SetProductID(p.ID)
}

// Mutation returns the AttributeValueNumMutation object of the builder.
func (avnuo *AttributeValueNumUpdateOne) Mutation() *AttributeValueNumMutation {
	return avnuo.mutation
}

// ClearVariant clears the "variant" edge to the AttributeVariantNum entity.
func (avnuo *AttributeValueNumUpdateOne) ClearVariant() *AttributeValueNumUpdateOne {
	avnuo.mutation.ClearVariant()
	return avnuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (avnuo *AttributeValueNumUpdateOne) ClearProduct() *AttributeValueNumUpdateOne {
	avnuo.mutation.ClearProduct()
	return avnuo
}

// Where appends a list predicates to the AttributeValueNumUpdate builder.
func (avnuo *AttributeValueNumUpdateOne) Where(ps ...predicate.AttributeValueNum) *AttributeValueNumUpdateOne {
	avnuo.mutation.Where(ps...)
	return avnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (avnuo *AttributeValueNumUpdateOne) Select(field string, fields ...string) *AttributeValueNumUpdateOne {
	avnuo.fields = append([]string{field}, fields...)
	return avnuo
}

// Save executes the query and returns the updated AttributeValueNum entity.
func (avnuo *AttributeValueNumUpdateOne) Save(ctx context.Context) (*AttributeValueNum, error) {
	return withHooks(ctx, avnuo.sqlSave, avnuo.mutation, avnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avnuo *AttributeValueNumUpdateOne) SaveX(ctx context.Context) *AttributeValueNum {
	node, err := avnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (avnuo *AttributeValueNumUpdateOne) Exec(ctx context.Context) error {
	_, err := avnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avnuo *AttributeValueNumUpdateOne) ExecX(ctx context.Context) {
	if err := avnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avnuo *AttributeValueNumUpdateOne) check() error {
	if _, ok := avnuo.mutation.VariantID(); avnuo.mutation.VariantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueNum.variant"`)
	}
	if _, ok := avnuo.mutation.ProductID(); avnuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueNum.product"`)
	}
	return nil
}

func (avnuo *AttributeValueNumUpdateOne) sqlSave(ctx context.Context) (_node *AttributeValueNum, err error) {
	if err := avnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributevaluenum.Table, attributevaluenum.Columns, sqlgraph.NewFieldSpec(attributevaluenum.FieldID, field.TypeInt))
	id, ok := avnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeValueNum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := avnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributevaluenum.FieldID)
		for _, f := range fields {
			if !attributevaluenum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributevaluenum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := avnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if avnuo.mutation.VariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributevaluenum.VariantTable,
			Columns: []string{attributevaluenum.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avnuo.mutation.VariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributevaluenum.VariantTable,
			Columns: []string{attributevaluenum.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avnuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluenum.ProductTable,
			Columns: []string{attributevaluenum.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avnuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluenum.ProductTable,
			Columns: []string{attributevaluenum.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttributeValueNum{config: avnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, avnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributevaluenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	avnuo.mutation.done = true
	return _node, nil
}
