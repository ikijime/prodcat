// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"prodcat/ent/attributevaluestring"
	"prodcat/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeValueStringDelete is the builder for deleting a AttributeValueString entity.
type AttributeValueStringDelete struct {
	config
	hooks    []Hook
	mutation *AttributeValueStringMutation
}

// Where appends a list predicates to the AttributeValueStringDelete builder.
func (avsd *AttributeValueStringDelete) Where(ps ...predicate.AttributeValueString) *AttributeValueStringDelete {
	avsd.mutation.Where(ps...)
	return avsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (avsd *AttributeValueStringDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, avsd.sqlExec, avsd.mutation, avsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (avsd *AttributeValueStringDelete) ExecX(ctx context.Context) int {
	n, err := avsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (avsd *AttributeValueStringDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(attributevaluestring.Table, sqlgraph.NewFieldSpec(attributevaluestring.FieldID, field.TypeInt))
	if ps := avsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, avsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	avsd.mutation.done = true
	return affected, err
}

// AttributeValueStringDeleteOne is the builder for deleting a single AttributeValueString entity.
type AttributeValueStringDeleteOne struct {
	avsd *AttributeValueStringDelete
}

// Where appends a list predicates to the AttributeValueStringDelete builder.
func (avsdo *AttributeValueStringDeleteOne) Where(ps ...predicate.AttributeValueString) *AttributeValueStringDeleteOne {
	avsdo.avsd.mutation.Where(ps...)
	return avsdo
}

// Exec executes the deletion query.
func (avsdo *AttributeValueStringDeleteOne) Exec(ctx context.Context) error {
	n, err := avsdo.avsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{attributevaluestring.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (avsdo *AttributeValueStringDeleteOne) ExecX(ctx context.Context) {
	if err := avsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
