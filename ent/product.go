// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"prodcat/ent/product"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code int `json:"code,omitempty"`
	// Barcode holds the value of the "barcode" field.
	Barcode string `json:"barcode,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges         ProductEdges `json:"edges"`
	brand_product *int
	selectValues  sql.SelectValues
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// AttributeValuesString holds the value of the attributeValuesString edge.
	AttributeValuesString []*AttributeValueString `json:"attributeValuesString,omitempty"`
	// AttributeValuesNum holds the value of the attributeValuesNum edge.
	AttributeValuesNum []*AttributeValueNum `json:"attributeValuesNum,omitempty"`
	// AttributeValuesBool holds the value of the attributeValuesBool edge.
	AttributeValuesBool []*AttributeValueBool `json:"attributeValuesBool,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AttributeValuesStringOrErr returns the AttributeValuesString value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) AttributeValuesStringOrErr() ([]*AttributeValueString, error) {
	if e.loadedTypes[0] {
		return e.AttributeValuesString, nil
	}
	return nil, &NotLoadedError{edge: "attributeValuesString"}
}

// AttributeValuesNumOrErr returns the AttributeValuesNum value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) AttributeValuesNumOrErr() ([]*AttributeValueNum, error) {
	if e.loadedTypes[1] {
		return e.AttributeValuesNum, nil
	}
	return nil, &NotLoadedError{edge: "attributeValuesNum"}
}

// AttributeValuesBoolOrErr returns the AttributeValuesBool value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) AttributeValuesBoolOrErr() ([]*AttributeValueBool, error) {
	if e.loadedTypes[2] {
		return e.AttributeValuesBool, nil
	}
	return nil, &NotLoadedError{edge: "attributeValuesBool"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID, product.FieldCode:
			values[i] = new(sql.NullInt64)
		case product.FieldBarcode, product.FieldName, product.FieldDescription:
			values[i] = new(sql.NullString)
		case product.FieldCreatedAt, product.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case product.ForeignKeys[0]: // brand_product
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pr.Code = int(value.Int64)
			}
		case product.FieldBarcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field barcode", values[i])
			} else if value.Valid {
				pr.Barcode = value.String
			}
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case product.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field brand_product", value)
			} else if value.Valid {
				pr.brand_product = new(int)
				*pr.brand_product = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryAttributeValuesString queries the "attributeValuesString" edge of the Product entity.
func (pr *Product) QueryAttributeValuesString() *AttributeValueStringQuery {
	return NewProductClient(pr.config).QueryAttributeValuesString(pr)
}

// QueryAttributeValuesNum queries the "attributeValuesNum" edge of the Product entity.
func (pr *Product) QueryAttributeValuesNum() *AttributeValueNumQuery {
	return NewProductClient(pr.config).QueryAttributeValuesNum(pr)
}

// QueryAttributeValuesBool queries the "attributeValuesBool" edge of the Product entity.
func (pr *Product) QueryAttributeValuesBool() *AttributeValueBoolQuery {
	return NewProductClient(pr.config).QueryAttributeValuesBool(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("code=")
	builder.WriteString(fmt.Sprintf("%v", pr.Code))
	builder.WriteString(", ")
	builder.WriteString("barcode=")
	builder.WriteString(pr.Barcode)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product
