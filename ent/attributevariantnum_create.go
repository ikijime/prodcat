// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevariantnum"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeVariantNumCreate is the builder for creating a AttributeVariantNum entity.
type AttributeVariantNumCreate struct {
	config
	mutation *AttributeVariantNumMutation
	hooks    []Hook
}

// SetAttributeID sets the "attribute_id" field.
func (avnc *AttributeVariantNumCreate) SetAttributeID(i int) *AttributeVariantNumCreate {
	avnc.mutation.SetAttributeID(i)
	return avnc
}

// SetValue sets the "value" field.
func (avnc *AttributeVariantNumCreate) SetValue(i int) *AttributeVariantNumCreate {
	avnc.mutation.SetValue(i)
	return avnc
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (avnc *AttributeVariantNumCreate) SetAttribute(a *Attribute) *AttributeVariantNumCreate {
	return avnc.SetAttributeID(a.ID)
}

// Mutation returns the AttributeVariantNumMutation object of the builder.
func (avnc *AttributeVariantNumCreate) Mutation() *AttributeVariantNumMutation {
	return avnc.mutation
}

// Save creates the AttributeVariantNum in the database.
func (avnc *AttributeVariantNumCreate) Save(ctx context.Context) (*AttributeVariantNum, error) {
	return withHooks(ctx, avnc.sqlSave, avnc.mutation, avnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (avnc *AttributeVariantNumCreate) SaveX(ctx context.Context) *AttributeVariantNum {
	v, err := avnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avnc *AttributeVariantNumCreate) Exec(ctx context.Context) error {
	_, err := avnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avnc *AttributeVariantNumCreate) ExecX(ctx context.Context) {
	if err := avnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avnc *AttributeVariantNumCreate) check() error {
	if _, ok := avnc.mutation.AttributeID(); !ok {
		return &ValidationError{Name: "attribute_id", err: errors.New(`ent: missing required field "AttributeVariantNum.attribute_id"`)}
	}
	if _, ok := avnc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "AttributeVariantNum.value"`)}
	}
	if _, ok := avnc.mutation.AttributeID(); !ok {
		return &ValidationError{Name: "attribute", err: errors.New(`ent: missing required edge "AttributeVariantNum.attribute"`)}
	}
	return nil
}

func (avnc *AttributeVariantNumCreate) sqlSave(ctx context.Context) (*AttributeVariantNum, error) {
	if err := avnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := avnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, avnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	avnc.mutation.id = &_node.ID
	avnc.mutation.done = true
	return _node, nil
}

func (avnc *AttributeVariantNumCreate) createSpec() (*AttributeVariantNum, *sqlgraph.CreateSpec) {
	var (
		_node = &AttributeVariantNum{config: avnc.config}
		_spec = sqlgraph.NewCreateSpec(attributevariantnum.Table, sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt))
	)
	if value, ok := avnc.mutation.Value(); ok {
		_spec.SetField(attributevariantnum.FieldValue, field.TypeInt, value)
		_node.Value = value
	}
	if nodes := avnc.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevariantnum.AttributeTable,
			Columns: []string{attributevariantnum.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AttributeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttributeVariantNumCreateBulk is the builder for creating many AttributeVariantNum entities in bulk.
type AttributeVariantNumCreateBulk struct {
	config
	err      error
	builders []*AttributeVariantNumCreate
}

// Save creates the AttributeVariantNum entities in the database.
func (avncb *AttributeVariantNumCreateBulk) Save(ctx context.Context) ([]*AttributeVariantNum, error) {
	if avncb.err != nil {
		return nil, avncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(avncb.builders))
	nodes := make([]*AttributeVariantNum, len(avncb.builders))
	mutators := make([]Mutator, len(avncb.builders))
	for i := range avncb.builders {
		func(i int, root context.Context) {
			builder := avncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeVariantNumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, avncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, avncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, avncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (avncb *AttributeVariantNumCreateBulk) SaveX(ctx context.Context) []*AttributeVariantNum {
	v, err := avncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avncb *AttributeVariantNumCreateBulk) Exec(ctx context.Context) error {
	_, err := avncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avncb *AttributeVariantNumCreateBulk) ExecX(ctx context.Context) {
	if err := avncb.Exec(ctx); err != nil {
		panic(err)
	}
}
