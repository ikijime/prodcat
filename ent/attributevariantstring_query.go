// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevariantstring"
	"prodcat/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeVariantStringQuery is the builder for querying AttributeVariantString entities.
type AttributeVariantStringQuery struct {
	config
	ctx           *QueryContext
	order         []attributevariantstring.OrderOption
	inters        []Interceptor
	predicates    []predicate.AttributeVariantString
	withAttribute *AttributeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AttributeVariantStringQuery builder.
func (avsq *AttributeVariantStringQuery) Where(ps ...predicate.AttributeVariantString) *AttributeVariantStringQuery {
	avsq.predicates = append(avsq.predicates, ps...)
	return avsq
}

// Limit the number of records to be returned by this query.
func (avsq *AttributeVariantStringQuery) Limit(limit int) *AttributeVariantStringQuery {
	avsq.ctx.Limit = &limit
	return avsq
}

// Offset to start from.
func (avsq *AttributeVariantStringQuery) Offset(offset int) *AttributeVariantStringQuery {
	avsq.ctx.Offset = &offset
	return avsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (avsq *AttributeVariantStringQuery) Unique(unique bool) *AttributeVariantStringQuery {
	avsq.ctx.Unique = &unique
	return avsq
}

// Order specifies how the records should be ordered.
func (avsq *AttributeVariantStringQuery) Order(o ...attributevariantstring.OrderOption) *AttributeVariantStringQuery {
	avsq.order = append(avsq.order, o...)
	return avsq
}

// QueryAttribute chains the current query on the "attribute" edge.
func (avsq *AttributeVariantStringQuery) QueryAttribute() *AttributeQuery {
	query := (&AttributeClient{config: avsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := avsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := avsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevariantstring.Table, attributevariantstring.FieldID, selector),
			sqlgraph.To(attribute.Table, attribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevariantstring.AttributeTable, attributevariantstring.AttributeColumn),
		)
		fromU = sqlgraph.SetNeighbors(avsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AttributeVariantString entity from the query.
// Returns a *NotFoundError when no AttributeVariantString was found.
func (avsq *AttributeVariantStringQuery) First(ctx context.Context) (*AttributeVariantString, error) {
	nodes, err := avsq.Limit(1).All(setContextOp(ctx, avsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{attributevariantstring.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (avsq *AttributeVariantStringQuery) FirstX(ctx context.Context) *AttributeVariantString {
	node, err := avsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AttributeVariantString ID from the query.
// Returns a *NotFoundError when no AttributeVariantString ID was found.
func (avsq *AttributeVariantStringQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = avsq.Limit(1).IDs(setContextOp(ctx, avsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{attributevariantstring.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (avsq *AttributeVariantStringQuery) FirstIDX(ctx context.Context) int {
	id, err := avsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AttributeVariantString entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AttributeVariantString entity is found.
// Returns a *NotFoundError when no AttributeVariantString entities are found.
func (avsq *AttributeVariantStringQuery) Only(ctx context.Context) (*AttributeVariantString, error) {
	nodes, err := avsq.Limit(2).All(setContextOp(ctx, avsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{attributevariantstring.Label}
	default:
		return nil, &NotSingularError{attributevariantstring.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (avsq *AttributeVariantStringQuery) OnlyX(ctx context.Context) *AttributeVariantString {
	node, err := avsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AttributeVariantString ID in the query.
// Returns a *NotSingularError when more than one AttributeVariantString ID is found.
// Returns a *NotFoundError when no entities are found.
func (avsq *AttributeVariantStringQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = avsq.Limit(2).IDs(setContextOp(ctx, avsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{attributevariantstring.Label}
	default:
		err = &NotSingularError{attributevariantstring.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (avsq *AttributeVariantStringQuery) OnlyIDX(ctx context.Context) int {
	id, err := avsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AttributeVariantStrings.
func (avsq *AttributeVariantStringQuery) All(ctx context.Context) ([]*AttributeVariantString, error) {
	ctx = setContextOp(ctx, avsq.ctx, "All")
	if err := avsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AttributeVariantString, *AttributeVariantStringQuery]()
	return withInterceptors[[]*AttributeVariantString](ctx, avsq, qr, avsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (avsq *AttributeVariantStringQuery) AllX(ctx context.Context) []*AttributeVariantString {
	nodes, err := avsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AttributeVariantString IDs.
func (avsq *AttributeVariantStringQuery) IDs(ctx context.Context) (ids []int, err error) {
	if avsq.ctx.Unique == nil && avsq.path != nil {
		avsq.Unique(true)
	}
	ctx = setContextOp(ctx, avsq.ctx, "IDs")
	if err = avsq.Select(attributevariantstring.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (avsq *AttributeVariantStringQuery) IDsX(ctx context.Context) []int {
	ids, err := avsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (avsq *AttributeVariantStringQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, avsq.ctx, "Count")
	if err := avsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, avsq, querierCount[*AttributeVariantStringQuery](), avsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (avsq *AttributeVariantStringQuery) CountX(ctx context.Context) int {
	count, err := avsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (avsq *AttributeVariantStringQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, avsq.ctx, "Exist")
	switch _, err := avsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (avsq *AttributeVariantStringQuery) ExistX(ctx context.Context) bool {
	exist, err := avsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AttributeVariantStringQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (avsq *AttributeVariantStringQuery) Clone() *AttributeVariantStringQuery {
	if avsq == nil {
		return nil
	}
	return &AttributeVariantStringQuery{
		config:        avsq.config,
		ctx:           avsq.ctx.Clone(),
		order:         append([]attributevariantstring.OrderOption{}, avsq.order...),
		inters:        append([]Interceptor{}, avsq.inters...),
		predicates:    append([]predicate.AttributeVariantString{}, avsq.predicates...),
		withAttribute: avsq.withAttribute.Clone(),
		// clone intermediate query.
		sql:  avsq.sql.Clone(),
		path: avsq.path,
	}
}

// WithAttribute tells the query-builder to eager-load the nodes that are connected to
// the "attribute" edge. The optional arguments are used to configure the query builder of the edge.
func (avsq *AttributeVariantStringQuery) WithAttribute(opts ...func(*AttributeQuery)) *AttributeVariantStringQuery {
	query := (&AttributeClient{config: avsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	avsq.withAttribute = query
	return avsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AttributeID int `json:"attribute_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AttributeVariantString.Query().
//		GroupBy(attributevariantstring.FieldAttributeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (avsq *AttributeVariantStringQuery) GroupBy(field string, fields ...string) *AttributeVariantStringGroupBy {
	avsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AttributeVariantStringGroupBy{build: avsq}
	grbuild.flds = &avsq.ctx.Fields
	grbuild.label = attributevariantstring.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AttributeID int `json:"attribute_id,omitempty"`
//	}
//
//	client.AttributeVariantString.Query().
//		Select(attributevariantstring.FieldAttributeID).
//		Scan(ctx, &v)
func (avsq *AttributeVariantStringQuery) Select(fields ...string) *AttributeVariantStringSelect {
	avsq.ctx.Fields = append(avsq.ctx.Fields, fields...)
	sbuild := &AttributeVariantStringSelect{AttributeVariantStringQuery: avsq}
	sbuild.label = attributevariantstring.Label
	sbuild.flds, sbuild.scan = &avsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AttributeVariantStringSelect configured with the given aggregations.
func (avsq *AttributeVariantStringQuery) Aggregate(fns ...AggregateFunc) *AttributeVariantStringSelect {
	return avsq.Select().Aggregate(fns...)
}

func (avsq *AttributeVariantStringQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range avsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, avsq); err != nil {
				return err
			}
		}
	}
	for _, f := range avsq.ctx.Fields {
		if !attributevariantstring.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if avsq.path != nil {
		prev, err := avsq.path(ctx)
		if err != nil {
			return err
		}
		avsq.sql = prev
	}
	return nil
}

func (avsq *AttributeVariantStringQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AttributeVariantString, error) {
	var (
		nodes       = []*AttributeVariantString{}
		_spec       = avsq.querySpec()
		loadedTypes = [1]bool{
			avsq.withAttribute != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AttributeVariantString).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AttributeVariantString{config: avsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, avsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := avsq.withAttribute; query != nil {
		if err := avsq.loadAttribute(ctx, query, nodes, nil,
			func(n *AttributeVariantString, e *Attribute) { n.Edges.Attribute = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (avsq *AttributeVariantStringQuery) loadAttribute(ctx context.Context, query *AttributeQuery, nodes []*AttributeVariantString, init func(*AttributeVariantString), assign func(*AttributeVariantString, *Attribute)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AttributeVariantString)
	for i := range nodes {
		fk := nodes[i].AttributeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(attribute.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "attribute_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (avsq *AttributeVariantStringQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := avsq.querySpec()
	_spec.Node.Columns = avsq.ctx.Fields
	if len(avsq.ctx.Fields) > 0 {
		_spec.Unique = avsq.ctx.Unique != nil && *avsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, avsq.driver, _spec)
}

func (avsq *AttributeVariantStringQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(attributevariantstring.Table, attributevariantstring.Columns, sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt))
	_spec.From = avsq.sql
	if unique := avsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if avsq.path != nil {
		_spec.Unique = true
	}
	if fields := avsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributevariantstring.FieldID)
		for i := range fields {
			if fields[i] != attributevariantstring.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if avsq.withAttribute != nil {
			_spec.Node.AddColumnOnce(attributevariantstring.FieldAttributeID)
		}
	}
	if ps := avsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := avsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := avsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := avsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (avsq *AttributeVariantStringQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(avsq.driver.Dialect())
	t1 := builder.Table(attributevariantstring.Table)
	columns := avsq.ctx.Fields
	if len(columns) == 0 {
		columns = attributevariantstring.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if avsq.sql != nil {
		selector = avsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if avsq.ctx.Unique != nil && *avsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range avsq.predicates {
		p(selector)
	}
	for _, p := range avsq.order {
		p(selector)
	}
	if offset := avsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := avsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AttributeVariantStringGroupBy is the group-by builder for AttributeVariantString entities.
type AttributeVariantStringGroupBy struct {
	selector
	build *AttributeVariantStringQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (avsgb *AttributeVariantStringGroupBy) Aggregate(fns ...AggregateFunc) *AttributeVariantStringGroupBy {
	avsgb.fns = append(avsgb.fns, fns...)
	return avsgb
}

// Scan applies the selector query and scans the result into the given value.
func (avsgb *AttributeVariantStringGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, avsgb.build.ctx, "GroupBy")
	if err := avsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AttributeVariantStringQuery, *AttributeVariantStringGroupBy](ctx, avsgb.build, avsgb, avsgb.build.inters, v)
}

func (avsgb *AttributeVariantStringGroupBy) sqlScan(ctx context.Context, root *AttributeVariantStringQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(avsgb.fns))
	for _, fn := range avsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*avsgb.flds)+len(avsgb.fns))
		for _, f := range *avsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*avsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := avsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AttributeVariantStringSelect is the builder for selecting fields of AttributeVariantString entities.
type AttributeVariantStringSelect struct {
	*AttributeVariantStringQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (avss *AttributeVariantStringSelect) Aggregate(fns ...AggregateFunc) *AttributeVariantStringSelect {
	avss.fns = append(avss.fns, fns...)
	return avss
}

// Scan applies the selector query and scans the result into the given value.
func (avss *AttributeVariantStringSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, avss.ctx, "Select")
	if err := avss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AttributeVariantStringQuery, *AttributeVariantStringSelect](ctx, avss.AttributeVariantStringQuery, avss, avss.inters, v)
}

func (avss *AttributeVariantStringSelect) sqlScan(ctx context.Context, root *AttributeVariantStringQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(avss.fns))
	for _, fn := range avss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*avss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := avss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
