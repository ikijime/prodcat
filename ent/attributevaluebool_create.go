// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevaluebool"
	"prodcat/ent/product"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeValueBoolCreate is the builder for creating a AttributeValueBool entity.
type AttributeValueBoolCreate struct {
	config
	mutation *AttributeValueBoolMutation
	hooks    []Hook
}

// SetAttributeID sets the "attribute_id" field.
func (avbc *AttributeValueBoolCreate) SetAttributeID(i int) *AttributeValueBoolCreate {
	avbc.mutation.SetAttributeID(i)
	return avbc
}

// SetProductID sets the "product_id" field.
func (avbc *AttributeValueBoolCreate) SetProductID(i int) *AttributeValueBoolCreate {
	avbc.mutation.SetProductID(i)
	return avbc
}

// SetValue sets the "value" field.
func (avbc *AttributeValueBoolCreate) SetValue(b bool) *AttributeValueBoolCreate {
	avbc.mutation.SetValue(b)
	return avbc
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (avbc *AttributeValueBoolCreate) SetAttribute(a *Attribute) *AttributeValueBoolCreate {
	return avbc.SetAttributeID(a.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (avbc *AttributeValueBoolCreate) SetProduct(p *Product) *AttributeValueBoolCreate {
	return avbc.SetProductID(p.ID)
}

// Mutation returns the AttributeValueBoolMutation object of the builder.
func (avbc *AttributeValueBoolCreate) Mutation() *AttributeValueBoolMutation {
	return avbc.mutation
}

// Save creates the AttributeValueBool in the database.
func (avbc *AttributeValueBoolCreate) Save(ctx context.Context) (*AttributeValueBool, error) {
	return withHooks(ctx, avbc.sqlSave, avbc.mutation, avbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (avbc *AttributeValueBoolCreate) SaveX(ctx context.Context) *AttributeValueBool {
	v, err := avbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avbc *AttributeValueBoolCreate) Exec(ctx context.Context) error {
	_, err := avbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avbc *AttributeValueBoolCreate) ExecX(ctx context.Context) {
	if err := avbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avbc *AttributeValueBoolCreate) check() error {
	if _, ok := avbc.mutation.AttributeID(); !ok {
		return &ValidationError{Name: "attribute_id", err: errors.New(`ent: missing required field "AttributeValueBool.attribute_id"`)}
	}
	if _, ok := avbc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "AttributeValueBool.product_id"`)}
	}
	if _, ok := avbc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "AttributeValueBool.value"`)}
	}
	if _, ok := avbc.mutation.AttributeID(); !ok {
		return &ValidationError{Name: "attribute", err: errors.New(`ent: missing required edge "AttributeValueBool.attribute"`)}
	}
	if _, ok := avbc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "AttributeValueBool.product"`)}
	}
	return nil
}

func (avbc *AttributeValueBoolCreate) sqlSave(ctx context.Context) (*AttributeValueBool, error) {
	if err := avbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := avbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, avbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	avbc.mutation.id = &_node.ID
	avbc.mutation.done = true
	return _node, nil
}

func (avbc *AttributeValueBoolCreate) createSpec() (*AttributeValueBool, *sqlgraph.CreateSpec) {
	var (
		_node = &AttributeValueBool{config: avbc.config}
		_spec = sqlgraph.NewCreateSpec(attributevaluebool.Table, sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt))
	)
	if value, ok := avbc.mutation.Value(); ok {
		_spec.SetField(attributevaluebool.FieldValue, field.TypeBool, value)
		_node.Value = value
	}
	if nodes := avbc.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.AttributeTable,
			Columns: []string{attributevaluebool.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AttributeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := avbc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.ProductTable,
			Columns: []string{attributevaluebool.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttributeValueBoolCreateBulk is the builder for creating many AttributeValueBool entities in bulk.
type AttributeValueBoolCreateBulk struct {
	config
	err      error
	builders []*AttributeValueBoolCreate
}

// Save creates the AttributeValueBool entities in the database.
func (avbcb *AttributeValueBoolCreateBulk) Save(ctx context.Context) ([]*AttributeValueBool, error) {
	if avbcb.err != nil {
		return nil, avbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(avbcb.builders))
	nodes := make([]*AttributeValueBool, len(avbcb.builders))
	mutators := make([]Mutator, len(avbcb.builders))
	for i := range avbcb.builders {
		func(i int, root context.Context) {
			builder := avbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeValueBoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, avbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, avbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, avbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (avbcb *AttributeValueBoolCreateBulk) SaveX(ctx context.Context) []*AttributeValueBool {
	v, err := avbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avbcb *AttributeValueBoolCreateBulk) Exec(ctx context.Context) error {
	_, err := avbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avbcb *AttributeValueBoolCreateBulk) ExecX(ctx context.Context) {
	if err := avbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
