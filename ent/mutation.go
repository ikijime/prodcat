// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevaluebool"
	"prodcat/ent/attributevaluenum"
	"prodcat/ent/attributevaluestring"
	"prodcat/ent/attributevariantnum"
	"prodcat/ent/attributevariantstring"
	"prodcat/ent/brand"
	"prodcat/ent/predicate"
	"prodcat/ent/product"
	"prodcat/ent/schema"
	"prodcat/ent/user"
	"prodcat/ent/usersettings"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttribute              = "Attribute"
	TypeAttributeValueBool     = "AttributeValueBool"
	TypeAttributeValueNum      = "AttributeValueNum"
	TypeAttributeValueString   = "AttributeValueString"
	TypeAttributeVariantNum    = "AttributeVariantNum"
	TypeAttributeVariantString = "AttributeVariantString"
	TypeBrand                  = "Brand"
	TypeProduct                = "Product"
	TypeUser                   = "User"
	TypeUserSettings           = "UserSettings"
)

// AttributeMutation represents an operation that mutates the Attribute nodes in the graph.
type AttributeMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	name                           *string
	description                    *string
	_type                          *string
	clearedFields                  map[string]struct{}
	attributeValuesBool            map[int]struct{}
	removedattributeValuesBool     map[int]struct{}
	clearedattributeValuesBool     bool
	attributeVariantsString        map[int]struct{}
	removedattributeVariantsString map[int]struct{}
	clearedattributeVariantsString bool
	attributeVariantsNum           map[int]struct{}
	removedattributeVariantsNum    map[int]struct{}
	clearedattributeVariantsNum    bool
	done                           bool
	oldValue                       func(context.Context) (*Attribute, error)
	predicates                     []predicate.Attribute
}

var _ ent.Mutation = (*AttributeMutation)(nil)

// attributeOption allows management of the mutation configuration using functional options.
type attributeOption func(*AttributeMutation)

// newAttributeMutation creates new mutation for the Attribute entity.
func newAttributeMutation(c config, op Op, opts ...attributeOption) *AttributeMutation {
	m := &AttributeMutation{
		config:        c,
		op:            op,
		typ:           TypeAttribute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeID sets the ID field of the mutation.
func withAttributeID(id int) attributeOption {
	return func(m *AttributeMutation) {
		var (
			err   error
			once  sync.Once
			value *Attribute
		)
		m.oldValue = func(ctx context.Context) (*Attribute, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attribute.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttribute sets the old Attribute of the mutation.
func withAttribute(node *Attribute) attributeOption {
	return func(m *AttributeMutation) {
		m.oldValue = func(context.Context) (*Attribute, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttributeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attribute.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AttributeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AttributeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AttributeMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *AttributeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AttributeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *AttributeMutation) ResetDescription() {
	m.description = nil
}

// SetType sets the "type" field.
func (m *AttributeMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *AttributeMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AttributeMutation) ResetType() {
	m._type = nil
}

// AddAttributeValuesBoolIDs adds the "attributeValuesBool" edge to the AttributeValueBool entity by ids.
func (m *AttributeMutation) AddAttributeValuesBoolIDs(ids ...int) {
	if m.attributeValuesBool == nil {
		m.attributeValuesBool = make(map[int]struct{})
	}
	for i := range ids {
		m.attributeValuesBool[ids[i]] = struct{}{}
	}
}

// ClearAttributeValuesBool clears the "attributeValuesBool" edge to the AttributeValueBool entity.
func (m *AttributeMutation) ClearAttributeValuesBool() {
	m.clearedattributeValuesBool = true
}

// AttributeValuesBoolCleared reports if the "attributeValuesBool" edge to the AttributeValueBool entity was cleared.
func (m *AttributeMutation) AttributeValuesBoolCleared() bool {
	return m.clearedattributeValuesBool
}

// RemoveAttributeValuesBoolIDs removes the "attributeValuesBool" edge to the AttributeValueBool entity by IDs.
func (m *AttributeMutation) RemoveAttributeValuesBoolIDs(ids ...int) {
	if m.removedattributeValuesBool == nil {
		m.removedattributeValuesBool = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attributeValuesBool, ids[i])
		m.removedattributeValuesBool[ids[i]] = struct{}{}
	}
}

// RemovedAttributeValuesBool returns the removed IDs of the "attributeValuesBool" edge to the AttributeValueBool entity.
func (m *AttributeMutation) RemovedAttributeValuesBoolIDs() (ids []int) {
	for id := range m.removedattributeValuesBool {
		ids = append(ids, id)
	}
	return
}

// AttributeValuesBoolIDs returns the "attributeValuesBool" edge IDs in the mutation.
func (m *AttributeMutation) AttributeValuesBoolIDs() (ids []int) {
	for id := range m.attributeValuesBool {
		ids = append(ids, id)
	}
	return
}

// ResetAttributeValuesBool resets all changes to the "attributeValuesBool" edge.
func (m *AttributeMutation) ResetAttributeValuesBool() {
	m.attributeValuesBool = nil
	m.clearedattributeValuesBool = false
	m.removedattributeValuesBool = nil
}

// AddAttributeVariantsStringIDs adds the "attributeVariantsString" edge to the AttributeVariantString entity by ids.
func (m *AttributeMutation) AddAttributeVariantsStringIDs(ids ...int) {
	if m.attributeVariantsString == nil {
		m.attributeVariantsString = make(map[int]struct{})
	}
	for i := range ids {
		m.attributeVariantsString[ids[i]] = struct{}{}
	}
}

// ClearAttributeVariantsString clears the "attributeVariantsString" edge to the AttributeVariantString entity.
func (m *AttributeMutation) ClearAttributeVariantsString() {
	m.clearedattributeVariantsString = true
}

// AttributeVariantsStringCleared reports if the "attributeVariantsString" edge to the AttributeVariantString entity was cleared.
func (m *AttributeMutation) AttributeVariantsStringCleared() bool {
	return m.clearedattributeVariantsString
}

// RemoveAttributeVariantsStringIDs removes the "attributeVariantsString" edge to the AttributeVariantString entity by IDs.
func (m *AttributeMutation) RemoveAttributeVariantsStringIDs(ids ...int) {
	if m.removedattributeVariantsString == nil {
		m.removedattributeVariantsString = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attributeVariantsString, ids[i])
		m.removedattributeVariantsString[ids[i]] = struct{}{}
	}
}

// RemovedAttributeVariantsString returns the removed IDs of the "attributeVariantsString" edge to the AttributeVariantString entity.
func (m *AttributeMutation) RemovedAttributeVariantsStringIDs() (ids []int) {
	for id := range m.removedattributeVariantsString {
		ids = append(ids, id)
	}
	return
}

// AttributeVariantsStringIDs returns the "attributeVariantsString" edge IDs in the mutation.
func (m *AttributeMutation) AttributeVariantsStringIDs() (ids []int) {
	for id := range m.attributeVariantsString {
		ids = append(ids, id)
	}
	return
}

// ResetAttributeVariantsString resets all changes to the "attributeVariantsString" edge.
func (m *AttributeMutation) ResetAttributeVariantsString() {
	m.attributeVariantsString = nil
	m.clearedattributeVariantsString = false
	m.removedattributeVariantsString = nil
}

// AddAttributeVariantsNumIDs adds the "attributeVariantsNum" edge to the AttributeVariantNum entity by ids.
func (m *AttributeMutation) AddAttributeVariantsNumIDs(ids ...int) {
	if m.attributeVariantsNum == nil {
		m.attributeVariantsNum = make(map[int]struct{})
	}
	for i := range ids {
		m.attributeVariantsNum[ids[i]] = struct{}{}
	}
}

// ClearAttributeVariantsNum clears the "attributeVariantsNum" edge to the AttributeVariantNum entity.
func (m *AttributeMutation) ClearAttributeVariantsNum() {
	m.clearedattributeVariantsNum = true
}

// AttributeVariantsNumCleared reports if the "attributeVariantsNum" edge to the AttributeVariantNum entity was cleared.
func (m *AttributeMutation) AttributeVariantsNumCleared() bool {
	return m.clearedattributeVariantsNum
}

// RemoveAttributeVariantsNumIDs removes the "attributeVariantsNum" edge to the AttributeVariantNum entity by IDs.
func (m *AttributeMutation) RemoveAttributeVariantsNumIDs(ids ...int) {
	if m.removedattributeVariantsNum == nil {
		m.removedattributeVariantsNum = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attributeVariantsNum, ids[i])
		m.removedattributeVariantsNum[ids[i]] = struct{}{}
	}
}

// RemovedAttributeVariantsNum returns the removed IDs of the "attributeVariantsNum" edge to the AttributeVariantNum entity.
func (m *AttributeMutation) RemovedAttributeVariantsNumIDs() (ids []int) {
	for id := range m.removedattributeVariantsNum {
		ids = append(ids, id)
	}
	return
}

// AttributeVariantsNumIDs returns the "attributeVariantsNum" edge IDs in the mutation.
func (m *AttributeMutation) AttributeVariantsNumIDs() (ids []int) {
	for id := range m.attributeVariantsNum {
		ids = append(ids, id)
	}
	return
}

// ResetAttributeVariantsNum resets all changes to the "attributeVariantsNum" edge.
func (m *AttributeMutation) ResetAttributeVariantsNum() {
	m.attributeVariantsNum = nil
	m.clearedattributeVariantsNum = false
	m.removedattributeVariantsNum = nil
}

// Where appends a list predicates to the AttributeMutation builder.
func (m *AttributeMutation) Where(ps ...predicate.Attribute) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttributeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttributeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Attribute, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttributeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttributeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Attribute).
func (m *AttributeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, attribute.FieldName)
	}
	if m.description != nil {
		fields = append(fields, attribute.FieldDescription)
	}
	if m._type != nil {
		fields = append(fields, attribute.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attribute.FieldName:
		return m.Name()
	case attribute.FieldDescription:
		return m.Description()
	case attribute.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attribute.FieldName:
		return m.OldName(ctx)
	case attribute.FieldDescription:
		return m.OldDescription(ctx)
	case attribute.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Attribute field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attribute.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case attribute.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case attribute.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Attribute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attribute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Attribute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeMutation) ResetField(name string) error {
	switch name {
	case attribute.FieldName:
		m.ResetName()
		return nil
	case attribute.FieldDescription:
		m.ResetDescription()
		return nil
	case attribute.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Attribute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.attributeValuesBool != nil {
		edges = append(edges, attribute.EdgeAttributeValuesBool)
	}
	if m.attributeVariantsString != nil {
		edges = append(edges, attribute.EdgeAttributeVariantsString)
	}
	if m.attributeVariantsNum != nil {
		edges = append(edges, attribute.EdgeAttributeVariantsNum)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attribute.EdgeAttributeValuesBool:
		ids := make([]ent.Value, 0, len(m.attributeValuesBool))
		for id := range m.attributeValuesBool {
			ids = append(ids, id)
		}
		return ids
	case attribute.EdgeAttributeVariantsString:
		ids := make([]ent.Value, 0, len(m.attributeVariantsString))
		for id := range m.attributeVariantsString {
			ids = append(ids, id)
		}
		return ids
	case attribute.EdgeAttributeVariantsNum:
		ids := make([]ent.Value, 0, len(m.attributeVariantsNum))
		for id := range m.attributeVariantsNum {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedattributeValuesBool != nil {
		edges = append(edges, attribute.EdgeAttributeValuesBool)
	}
	if m.removedattributeVariantsString != nil {
		edges = append(edges, attribute.EdgeAttributeVariantsString)
	}
	if m.removedattributeVariantsNum != nil {
		edges = append(edges, attribute.EdgeAttributeVariantsNum)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case attribute.EdgeAttributeValuesBool:
		ids := make([]ent.Value, 0, len(m.removedattributeValuesBool))
		for id := range m.removedattributeValuesBool {
			ids = append(ids, id)
		}
		return ids
	case attribute.EdgeAttributeVariantsString:
		ids := make([]ent.Value, 0, len(m.removedattributeVariantsString))
		for id := range m.removedattributeVariantsString {
			ids = append(ids, id)
		}
		return ids
	case attribute.EdgeAttributeVariantsNum:
		ids := make([]ent.Value, 0, len(m.removedattributeVariantsNum))
		for id := range m.removedattributeVariantsNum {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedattributeValuesBool {
		edges = append(edges, attribute.EdgeAttributeValuesBool)
	}
	if m.clearedattributeVariantsString {
		edges = append(edges, attribute.EdgeAttributeVariantsString)
	}
	if m.clearedattributeVariantsNum {
		edges = append(edges, attribute.EdgeAttributeVariantsNum)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeMutation) EdgeCleared(name string) bool {
	switch name {
	case attribute.EdgeAttributeValuesBool:
		return m.clearedattributeValuesBool
	case attribute.EdgeAttributeVariantsString:
		return m.clearedattributeVariantsString
	case attribute.EdgeAttributeVariantsNum:
		return m.clearedattributeVariantsNum
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Attribute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeMutation) ResetEdge(name string) error {
	switch name {
	case attribute.EdgeAttributeValuesBool:
		m.ResetAttributeValuesBool()
		return nil
	case attribute.EdgeAttributeVariantsString:
		m.ResetAttributeVariantsString()
		return nil
	case attribute.EdgeAttributeVariantsNum:
		m.ResetAttributeVariantsNum()
		return nil
	}
	return fmt.Errorf("unknown Attribute edge %s", name)
}

// AttributeValueBoolMutation represents an operation that mutates the AttributeValueBool nodes in the graph.
type AttributeValueBoolMutation struct {
	config
	op               Op
	typ              string
	id               *int
	value            *bool
	clearedFields    map[string]struct{}
	attribute        *int
	clearedattribute bool
	product          *int
	clearedproduct   bool
	done             bool
	oldValue         func(context.Context) (*AttributeValueBool, error)
	predicates       []predicate.AttributeValueBool
}

var _ ent.Mutation = (*AttributeValueBoolMutation)(nil)

// attributevalueboolOption allows management of the mutation configuration using functional options.
type attributevalueboolOption func(*AttributeValueBoolMutation)

// newAttributeValueBoolMutation creates new mutation for the AttributeValueBool entity.
func newAttributeValueBoolMutation(c config, op Op, opts ...attributevalueboolOption) *AttributeValueBoolMutation {
	m := &AttributeValueBoolMutation{
		config:        c,
		op:            op,
		typ:           TypeAttributeValueBool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeValueBoolID sets the ID field of the mutation.
func withAttributeValueBoolID(id int) attributevalueboolOption {
	return func(m *AttributeValueBoolMutation) {
		var (
			err   error
			once  sync.Once
			value *AttributeValueBool
		)
		m.oldValue = func(ctx context.Context) (*AttributeValueBool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttributeValueBool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttributeValueBool sets the old AttributeValueBool of the mutation.
func withAttributeValueBool(node *AttributeValueBool) attributevalueboolOption {
	return func(m *AttributeValueBoolMutation) {
		m.oldValue = func(context.Context) (*AttributeValueBool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeValueBoolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeValueBoolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeValueBoolMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttributeValueBoolMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttributeValueBool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAttributeID sets the "attribute_id" field.
func (m *AttributeValueBoolMutation) SetAttributeID(i int) {
	m.attribute = &i
}

// AttributeID returns the value of the "attribute_id" field in the mutation.
func (m *AttributeValueBoolMutation) AttributeID() (r int, exists bool) {
	v := m.attribute
	if v == nil {
		return
	}
	return *v, true
}

// OldAttributeID returns the old "attribute_id" field's value of the AttributeValueBool entity.
// If the AttributeValueBool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeValueBoolMutation) OldAttributeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttributeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttributeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttributeID: %w", err)
	}
	return oldValue.AttributeID, nil
}

// ResetAttributeID resets all changes to the "attribute_id" field.
func (m *AttributeValueBoolMutation) ResetAttributeID() {
	m.attribute = nil
}

// SetProductID sets the "product_id" field.
func (m *AttributeValueBoolMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *AttributeValueBoolMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the AttributeValueBool entity.
// If the AttributeValueBool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeValueBoolMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *AttributeValueBoolMutation) ResetProductID() {
	m.product = nil
}

// SetValue sets the "value" field.
func (m *AttributeValueBoolMutation) SetValue(b bool) {
	m.value = &b
}

// Value returns the value of the "value" field in the mutation.
func (m *AttributeValueBoolMutation) Value() (r bool, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the AttributeValueBool entity.
// If the AttributeValueBool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeValueBoolMutation) OldValue(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *AttributeValueBoolMutation) ResetValue() {
	m.value = nil
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (m *AttributeValueBoolMutation) ClearAttribute() {
	m.clearedattribute = true
	m.clearedFields[attributevaluebool.FieldAttributeID] = struct{}{}
}

// AttributeCleared reports if the "attribute" edge to the Attribute entity was cleared.
func (m *AttributeValueBoolMutation) AttributeCleared() bool {
	return m.clearedattribute
}

// AttributeIDs returns the "attribute" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttributeID instead. It exists only for internal usage by the builders.
func (m *AttributeValueBoolMutation) AttributeIDs() (ids []int) {
	if id := m.attribute; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttribute resets all changes to the "attribute" edge.
func (m *AttributeValueBoolMutation) ResetAttribute() {
	m.attribute = nil
	m.clearedattribute = false
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *AttributeValueBoolMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[attributevaluebool.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *AttributeValueBoolMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *AttributeValueBoolMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *AttributeValueBoolMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// Where appends a list predicates to the AttributeValueBoolMutation builder.
func (m *AttributeValueBoolMutation) Where(ps ...predicate.AttributeValueBool) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttributeValueBoolMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttributeValueBoolMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AttributeValueBool, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttributeValueBoolMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttributeValueBoolMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AttributeValueBool).
func (m *AttributeValueBoolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeValueBoolMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.attribute != nil {
		fields = append(fields, attributevaluebool.FieldAttributeID)
	}
	if m.product != nil {
		fields = append(fields, attributevaluebool.FieldProductID)
	}
	if m.value != nil {
		fields = append(fields, attributevaluebool.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeValueBoolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attributevaluebool.FieldAttributeID:
		return m.AttributeID()
	case attributevaluebool.FieldProductID:
		return m.ProductID()
	case attributevaluebool.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeValueBoolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attributevaluebool.FieldAttributeID:
		return m.OldAttributeID(ctx)
	case attributevaluebool.FieldProductID:
		return m.OldProductID(ctx)
	case attributevaluebool.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown AttributeValueBool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeValueBoolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attributevaluebool.FieldAttributeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttributeID(v)
		return nil
	case attributevaluebool.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case attributevaluebool.FieldValue:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown AttributeValueBool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeValueBoolMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeValueBoolMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeValueBoolMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AttributeValueBool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeValueBoolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeValueBoolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeValueBoolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AttributeValueBool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeValueBoolMutation) ResetField(name string) error {
	switch name {
	case attributevaluebool.FieldAttributeID:
		m.ResetAttributeID()
		return nil
	case attributevaluebool.FieldProductID:
		m.ResetProductID()
		return nil
	case attributevaluebool.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown AttributeValueBool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeValueBoolMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.attribute != nil {
		edges = append(edges, attributevaluebool.EdgeAttribute)
	}
	if m.product != nil {
		edges = append(edges, attributevaluebool.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeValueBoolMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attributevaluebool.EdgeAttribute:
		if id := m.attribute; id != nil {
			return []ent.Value{*id}
		}
	case attributevaluebool.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeValueBoolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeValueBoolMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeValueBoolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedattribute {
		edges = append(edges, attributevaluebool.EdgeAttribute)
	}
	if m.clearedproduct {
		edges = append(edges, attributevaluebool.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeValueBoolMutation) EdgeCleared(name string) bool {
	switch name {
	case attributevaluebool.EdgeAttribute:
		return m.clearedattribute
	case attributevaluebool.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeValueBoolMutation) ClearEdge(name string) error {
	switch name {
	case attributevaluebool.EdgeAttribute:
		m.ClearAttribute()
		return nil
	case attributevaluebool.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown AttributeValueBool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeValueBoolMutation) ResetEdge(name string) error {
	switch name {
	case attributevaluebool.EdgeAttribute:
		m.ResetAttribute()
		return nil
	case attributevaluebool.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown AttributeValueBool edge %s", name)
}

// AttributeValueNumMutation represents an operation that mutates the AttributeValueNum nodes in the graph.
type AttributeValueNumMutation struct {
	config
	op             Op
	typ            string
	id             *int
	clearedFields  map[string]struct{}
	variant        *int
	clearedvariant bool
	product        *int
	clearedproduct bool
	done           bool
	oldValue       func(context.Context) (*AttributeValueNum, error)
	predicates     []predicate.AttributeValueNum
}

var _ ent.Mutation = (*AttributeValueNumMutation)(nil)

// attributevaluenumOption allows management of the mutation configuration using functional options.
type attributevaluenumOption func(*AttributeValueNumMutation)

// newAttributeValueNumMutation creates new mutation for the AttributeValueNum entity.
func newAttributeValueNumMutation(c config, op Op, opts ...attributevaluenumOption) *AttributeValueNumMutation {
	m := &AttributeValueNumMutation{
		config:        c,
		op:            op,
		typ:           TypeAttributeValueNum,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeValueNumID sets the ID field of the mutation.
func withAttributeValueNumID(id int) attributevaluenumOption {
	return func(m *AttributeValueNumMutation) {
		var (
			err   error
			once  sync.Once
			value *AttributeValueNum
		)
		m.oldValue = func(ctx context.Context) (*AttributeValueNum, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttributeValueNum.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttributeValueNum sets the old AttributeValueNum of the mutation.
func withAttributeValueNum(node *AttributeValueNum) attributevaluenumOption {
	return func(m *AttributeValueNumMutation) {
		m.oldValue = func(context.Context) (*AttributeValueNum, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeValueNumMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeValueNumMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeValueNumMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttributeValueNumMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttributeValueNum.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVariantID sets the "variant_id" field.
func (m *AttributeValueNumMutation) SetVariantID(i int) {
	m.variant = &i
}

// VariantID returns the value of the "variant_id" field in the mutation.
func (m *AttributeValueNumMutation) VariantID() (r int, exists bool) {
	v := m.variant
	if v == nil {
		return
	}
	return *v, true
}

// OldVariantID returns the old "variant_id" field's value of the AttributeValueNum entity.
// If the AttributeValueNum object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeValueNumMutation) OldVariantID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVariantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVariantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVariantID: %w", err)
	}
	return oldValue.VariantID, nil
}

// ResetVariantID resets all changes to the "variant_id" field.
func (m *AttributeValueNumMutation) ResetVariantID() {
	m.variant = nil
}

// SetProductID sets the "product_id" field.
func (m *AttributeValueNumMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *AttributeValueNumMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the AttributeValueNum entity.
// If the AttributeValueNum object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeValueNumMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *AttributeValueNumMutation) ResetProductID() {
	m.product = nil
}

// ClearVariant clears the "variant" edge to the AttributeVariantNum entity.
func (m *AttributeValueNumMutation) ClearVariant() {
	m.clearedvariant = true
	m.clearedFields[attributevaluenum.FieldVariantID] = struct{}{}
}

// VariantCleared reports if the "variant" edge to the AttributeVariantNum entity was cleared.
func (m *AttributeValueNumMutation) VariantCleared() bool {
	return m.clearedvariant
}

// VariantIDs returns the "variant" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VariantID instead. It exists only for internal usage by the builders.
func (m *AttributeValueNumMutation) VariantIDs() (ids []int) {
	if id := m.variant; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVariant resets all changes to the "variant" edge.
func (m *AttributeValueNumMutation) ResetVariant() {
	m.variant = nil
	m.clearedvariant = false
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *AttributeValueNumMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[attributevaluenum.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *AttributeValueNumMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *AttributeValueNumMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *AttributeValueNumMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// Where appends a list predicates to the AttributeValueNumMutation builder.
func (m *AttributeValueNumMutation) Where(ps ...predicate.AttributeValueNum) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttributeValueNumMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttributeValueNumMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AttributeValueNum, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttributeValueNumMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttributeValueNumMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AttributeValueNum).
func (m *AttributeValueNumMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeValueNumMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.variant != nil {
		fields = append(fields, attributevaluenum.FieldVariantID)
	}
	if m.product != nil {
		fields = append(fields, attributevaluenum.FieldProductID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeValueNumMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attributevaluenum.FieldVariantID:
		return m.VariantID()
	case attributevaluenum.FieldProductID:
		return m.ProductID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeValueNumMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attributevaluenum.FieldVariantID:
		return m.OldVariantID(ctx)
	case attributevaluenum.FieldProductID:
		return m.OldProductID(ctx)
	}
	return nil, fmt.Errorf("unknown AttributeValueNum field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeValueNumMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attributevaluenum.FieldVariantID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVariantID(v)
		return nil
	case attributevaluenum.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	}
	return fmt.Errorf("unknown AttributeValueNum field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeValueNumMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeValueNumMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeValueNumMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AttributeValueNum numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeValueNumMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeValueNumMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeValueNumMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AttributeValueNum nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeValueNumMutation) ResetField(name string) error {
	switch name {
	case attributevaluenum.FieldVariantID:
		m.ResetVariantID()
		return nil
	case attributevaluenum.FieldProductID:
		m.ResetProductID()
		return nil
	}
	return fmt.Errorf("unknown AttributeValueNum field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeValueNumMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.variant != nil {
		edges = append(edges, attributevaluenum.EdgeVariant)
	}
	if m.product != nil {
		edges = append(edges, attributevaluenum.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeValueNumMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attributevaluenum.EdgeVariant:
		if id := m.variant; id != nil {
			return []ent.Value{*id}
		}
	case attributevaluenum.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeValueNumMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeValueNumMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeValueNumMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvariant {
		edges = append(edges, attributevaluenum.EdgeVariant)
	}
	if m.clearedproduct {
		edges = append(edges, attributevaluenum.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeValueNumMutation) EdgeCleared(name string) bool {
	switch name {
	case attributevaluenum.EdgeVariant:
		return m.clearedvariant
	case attributevaluenum.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeValueNumMutation) ClearEdge(name string) error {
	switch name {
	case attributevaluenum.EdgeVariant:
		m.ClearVariant()
		return nil
	case attributevaluenum.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown AttributeValueNum unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeValueNumMutation) ResetEdge(name string) error {
	switch name {
	case attributevaluenum.EdgeVariant:
		m.ResetVariant()
		return nil
	case attributevaluenum.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown AttributeValueNum edge %s", name)
}

// AttributeValueStringMutation represents an operation that mutates the AttributeValueString nodes in the graph.
type AttributeValueStringMutation struct {
	config
	op             Op
	typ            string
	id             *int
	clearedFields  map[string]struct{}
	variant        *int
	clearedvariant bool
	product        *int
	clearedproduct bool
	done           bool
	oldValue       func(context.Context) (*AttributeValueString, error)
	predicates     []predicate.AttributeValueString
}

var _ ent.Mutation = (*AttributeValueStringMutation)(nil)

// attributevaluestringOption allows management of the mutation configuration using functional options.
type attributevaluestringOption func(*AttributeValueStringMutation)

// newAttributeValueStringMutation creates new mutation for the AttributeValueString entity.
func newAttributeValueStringMutation(c config, op Op, opts ...attributevaluestringOption) *AttributeValueStringMutation {
	m := &AttributeValueStringMutation{
		config:        c,
		op:            op,
		typ:           TypeAttributeValueString,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeValueStringID sets the ID field of the mutation.
func withAttributeValueStringID(id int) attributevaluestringOption {
	return func(m *AttributeValueStringMutation) {
		var (
			err   error
			once  sync.Once
			value *AttributeValueString
		)
		m.oldValue = func(ctx context.Context) (*AttributeValueString, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttributeValueString.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttributeValueString sets the old AttributeValueString of the mutation.
func withAttributeValueString(node *AttributeValueString) attributevaluestringOption {
	return func(m *AttributeValueStringMutation) {
		m.oldValue = func(context.Context) (*AttributeValueString, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeValueStringMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeValueStringMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeValueStringMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttributeValueStringMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttributeValueString.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVariantID sets the "variant_id" field.
func (m *AttributeValueStringMutation) SetVariantID(i int) {
	m.variant = &i
}

// VariantID returns the value of the "variant_id" field in the mutation.
func (m *AttributeValueStringMutation) VariantID() (r int, exists bool) {
	v := m.variant
	if v == nil {
		return
	}
	return *v, true
}

// OldVariantID returns the old "variant_id" field's value of the AttributeValueString entity.
// If the AttributeValueString object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeValueStringMutation) OldVariantID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVariantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVariantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVariantID: %w", err)
	}
	return oldValue.VariantID, nil
}

// ResetVariantID resets all changes to the "variant_id" field.
func (m *AttributeValueStringMutation) ResetVariantID() {
	m.variant = nil
}

// SetProductID sets the "product_id" field.
func (m *AttributeValueStringMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *AttributeValueStringMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the AttributeValueString entity.
// If the AttributeValueString object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeValueStringMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *AttributeValueStringMutation) ResetProductID() {
	m.product = nil
}

// ClearVariant clears the "variant" edge to the AttributeVariantString entity.
func (m *AttributeValueStringMutation) ClearVariant() {
	m.clearedvariant = true
	m.clearedFields[attributevaluestring.FieldVariantID] = struct{}{}
}

// VariantCleared reports if the "variant" edge to the AttributeVariantString entity was cleared.
func (m *AttributeValueStringMutation) VariantCleared() bool {
	return m.clearedvariant
}

// VariantIDs returns the "variant" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VariantID instead. It exists only for internal usage by the builders.
func (m *AttributeValueStringMutation) VariantIDs() (ids []int) {
	if id := m.variant; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVariant resets all changes to the "variant" edge.
func (m *AttributeValueStringMutation) ResetVariant() {
	m.variant = nil
	m.clearedvariant = false
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *AttributeValueStringMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[attributevaluestring.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *AttributeValueStringMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *AttributeValueStringMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *AttributeValueStringMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// Where appends a list predicates to the AttributeValueStringMutation builder.
func (m *AttributeValueStringMutation) Where(ps ...predicate.AttributeValueString) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttributeValueStringMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttributeValueStringMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AttributeValueString, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttributeValueStringMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttributeValueStringMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AttributeValueString).
func (m *AttributeValueStringMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeValueStringMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.variant != nil {
		fields = append(fields, attributevaluestring.FieldVariantID)
	}
	if m.product != nil {
		fields = append(fields, attributevaluestring.FieldProductID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeValueStringMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attributevaluestring.FieldVariantID:
		return m.VariantID()
	case attributevaluestring.FieldProductID:
		return m.ProductID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeValueStringMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attributevaluestring.FieldVariantID:
		return m.OldVariantID(ctx)
	case attributevaluestring.FieldProductID:
		return m.OldProductID(ctx)
	}
	return nil, fmt.Errorf("unknown AttributeValueString field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeValueStringMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attributevaluestring.FieldVariantID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVariantID(v)
		return nil
	case attributevaluestring.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	}
	return fmt.Errorf("unknown AttributeValueString field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeValueStringMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeValueStringMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeValueStringMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AttributeValueString numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeValueStringMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeValueStringMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeValueStringMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AttributeValueString nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeValueStringMutation) ResetField(name string) error {
	switch name {
	case attributevaluestring.FieldVariantID:
		m.ResetVariantID()
		return nil
	case attributevaluestring.FieldProductID:
		m.ResetProductID()
		return nil
	}
	return fmt.Errorf("unknown AttributeValueString field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeValueStringMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.variant != nil {
		edges = append(edges, attributevaluestring.EdgeVariant)
	}
	if m.product != nil {
		edges = append(edges, attributevaluestring.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeValueStringMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attributevaluestring.EdgeVariant:
		if id := m.variant; id != nil {
			return []ent.Value{*id}
		}
	case attributevaluestring.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeValueStringMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeValueStringMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeValueStringMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvariant {
		edges = append(edges, attributevaluestring.EdgeVariant)
	}
	if m.clearedproduct {
		edges = append(edges, attributevaluestring.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeValueStringMutation) EdgeCleared(name string) bool {
	switch name {
	case attributevaluestring.EdgeVariant:
		return m.clearedvariant
	case attributevaluestring.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeValueStringMutation) ClearEdge(name string) error {
	switch name {
	case attributevaluestring.EdgeVariant:
		m.ClearVariant()
		return nil
	case attributevaluestring.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown AttributeValueString unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeValueStringMutation) ResetEdge(name string) error {
	switch name {
	case attributevaluestring.EdgeVariant:
		m.ResetVariant()
		return nil
	case attributevaluestring.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown AttributeValueString edge %s", name)
}

// AttributeVariantNumMutation represents an operation that mutates the AttributeVariantNum nodes in the graph.
type AttributeVariantNumMutation struct {
	config
	op               Op
	typ              string
	id               *int
	value            *int
	addvalue         *int
	clearedFields    map[string]struct{}
	attribute        *int
	clearedattribute bool
	done             bool
	oldValue         func(context.Context) (*AttributeVariantNum, error)
	predicates       []predicate.AttributeVariantNum
}

var _ ent.Mutation = (*AttributeVariantNumMutation)(nil)

// attributevariantnumOption allows management of the mutation configuration using functional options.
type attributevariantnumOption func(*AttributeVariantNumMutation)

// newAttributeVariantNumMutation creates new mutation for the AttributeVariantNum entity.
func newAttributeVariantNumMutation(c config, op Op, opts ...attributevariantnumOption) *AttributeVariantNumMutation {
	m := &AttributeVariantNumMutation{
		config:        c,
		op:            op,
		typ:           TypeAttributeVariantNum,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeVariantNumID sets the ID field of the mutation.
func withAttributeVariantNumID(id int) attributevariantnumOption {
	return func(m *AttributeVariantNumMutation) {
		var (
			err   error
			once  sync.Once
			value *AttributeVariantNum
		)
		m.oldValue = func(ctx context.Context) (*AttributeVariantNum, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttributeVariantNum.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttributeVariantNum sets the old AttributeVariantNum of the mutation.
func withAttributeVariantNum(node *AttributeVariantNum) attributevariantnumOption {
	return func(m *AttributeVariantNumMutation) {
		m.oldValue = func(context.Context) (*AttributeVariantNum, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeVariantNumMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeVariantNumMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeVariantNumMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttributeVariantNumMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttributeVariantNum.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAttributeID sets the "attribute_id" field.
func (m *AttributeVariantNumMutation) SetAttributeID(i int) {
	m.attribute = &i
}

// AttributeID returns the value of the "attribute_id" field in the mutation.
func (m *AttributeVariantNumMutation) AttributeID() (r int, exists bool) {
	v := m.attribute
	if v == nil {
		return
	}
	return *v, true
}

// OldAttributeID returns the old "attribute_id" field's value of the AttributeVariantNum entity.
// If the AttributeVariantNum object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeVariantNumMutation) OldAttributeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttributeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttributeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttributeID: %w", err)
	}
	return oldValue.AttributeID, nil
}

// ResetAttributeID resets all changes to the "attribute_id" field.
func (m *AttributeVariantNumMutation) ResetAttributeID() {
	m.attribute = nil
}

// SetValue sets the "value" field.
func (m *AttributeVariantNumMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *AttributeVariantNumMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the AttributeVariantNum entity.
// If the AttributeVariantNum object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeVariantNumMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *AttributeVariantNumMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *AttributeVariantNumMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *AttributeVariantNumMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (m *AttributeVariantNumMutation) ClearAttribute() {
	m.clearedattribute = true
	m.clearedFields[attributevariantnum.FieldAttributeID] = struct{}{}
}

// AttributeCleared reports if the "attribute" edge to the Attribute entity was cleared.
func (m *AttributeVariantNumMutation) AttributeCleared() bool {
	return m.clearedattribute
}

// AttributeIDs returns the "attribute" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttributeID instead. It exists only for internal usage by the builders.
func (m *AttributeVariantNumMutation) AttributeIDs() (ids []int) {
	if id := m.attribute; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttribute resets all changes to the "attribute" edge.
func (m *AttributeVariantNumMutation) ResetAttribute() {
	m.attribute = nil
	m.clearedattribute = false
}

// Where appends a list predicates to the AttributeVariantNumMutation builder.
func (m *AttributeVariantNumMutation) Where(ps ...predicate.AttributeVariantNum) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttributeVariantNumMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttributeVariantNumMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AttributeVariantNum, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttributeVariantNumMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttributeVariantNumMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AttributeVariantNum).
func (m *AttributeVariantNumMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeVariantNumMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.attribute != nil {
		fields = append(fields, attributevariantnum.FieldAttributeID)
	}
	if m.value != nil {
		fields = append(fields, attributevariantnum.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeVariantNumMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attributevariantnum.FieldAttributeID:
		return m.AttributeID()
	case attributevariantnum.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeVariantNumMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attributevariantnum.FieldAttributeID:
		return m.OldAttributeID(ctx)
	case attributevariantnum.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown AttributeVariantNum field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeVariantNumMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attributevariantnum.FieldAttributeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttributeID(v)
		return nil
	case attributevariantnum.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown AttributeVariantNum field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeVariantNumMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, attributevariantnum.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeVariantNumMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case attributevariantnum.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeVariantNumMutation) AddField(name string, value ent.Value) error {
	switch name {
	case attributevariantnum.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown AttributeVariantNum numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeVariantNumMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeVariantNumMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeVariantNumMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AttributeVariantNum nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeVariantNumMutation) ResetField(name string) error {
	switch name {
	case attributevariantnum.FieldAttributeID:
		m.ResetAttributeID()
		return nil
	case attributevariantnum.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown AttributeVariantNum field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeVariantNumMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attribute != nil {
		edges = append(edges, attributevariantnum.EdgeAttribute)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeVariantNumMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attributevariantnum.EdgeAttribute:
		if id := m.attribute; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeVariantNumMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeVariantNumMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeVariantNumMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattribute {
		edges = append(edges, attributevariantnum.EdgeAttribute)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeVariantNumMutation) EdgeCleared(name string) bool {
	switch name {
	case attributevariantnum.EdgeAttribute:
		return m.clearedattribute
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeVariantNumMutation) ClearEdge(name string) error {
	switch name {
	case attributevariantnum.EdgeAttribute:
		m.ClearAttribute()
		return nil
	}
	return fmt.Errorf("unknown AttributeVariantNum unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeVariantNumMutation) ResetEdge(name string) error {
	switch name {
	case attributevariantnum.EdgeAttribute:
		m.ResetAttribute()
		return nil
	}
	return fmt.Errorf("unknown AttributeVariantNum edge %s", name)
}

// AttributeVariantStringMutation represents an operation that mutates the AttributeVariantString nodes in the graph.
type AttributeVariantStringMutation struct {
	config
	op               Op
	typ              string
	id               *int
	value            *string
	clearedFields    map[string]struct{}
	attribute        *int
	clearedattribute bool
	done             bool
	oldValue         func(context.Context) (*AttributeVariantString, error)
	predicates       []predicate.AttributeVariantString
}

var _ ent.Mutation = (*AttributeVariantStringMutation)(nil)

// attributevariantstringOption allows management of the mutation configuration using functional options.
type attributevariantstringOption func(*AttributeVariantStringMutation)

// newAttributeVariantStringMutation creates new mutation for the AttributeVariantString entity.
func newAttributeVariantStringMutation(c config, op Op, opts ...attributevariantstringOption) *AttributeVariantStringMutation {
	m := &AttributeVariantStringMutation{
		config:        c,
		op:            op,
		typ:           TypeAttributeVariantString,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeVariantStringID sets the ID field of the mutation.
func withAttributeVariantStringID(id int) attributevariantstringOption {
	return func(m *AttributeVariantStringMutation) {
		var (
			err   error
			once  sync.Once
			value *AttributeVariantString
		)
		m.oldValue = func(ctx context.Context) (*AttributeVariantString, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttributeVariantString.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttributeVariantString sets the old AttributeVariantString of the mutation.
func withAttributeVariantString(node *AttributeVariantString) attributevariantstringOption {
	return func(m *AttributeVariantStringMutation) {
		m.oldValue = func(context.Context) (*AttributeVariantString, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeVariantStringMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeVariantStringMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeVariantStringMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttributeVariantStringMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttributeVariantString.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAttributeID sets the "attribute_id" field.
func (m *AttributeVariantStringMutation) SetAttributeID(i int) {
	m.attribute = &i
}

// AttributeID returns the value of the "attribute_id" field in the mutation.
func (m *AttributeVariantStringMutation) AttributeID() (r int, exists bool) {
	v := m.attribute
	if v == nil {
		return
	}
	return *v, true
}

// OldAttributeID returns the old "attribute_id" field's value of the AttributeVariantString entity.
// If the AttributeVariantString object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeVariantStringMutation) OldAttributeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttributeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttributeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttributeID: %w", err)
	}
	return oldValue.AttributeID, nil
}

// ResetAttributeID resets all changes to the "attribute_id" field.
func (m *AttributeVariantStringMutation) ResetAttributeID() {
	m.attribute = nil
}

// SetValue sets the "value" field.
func (m *AttributeVariantStringMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *AttributeVariantStringMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the AttributeVariantString entity.
// If the AttributeVariantString object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeVariantStringMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *AttributeVariantStringMutation) ResetValue() {
	m.value = nil
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (m *AttributeVariantStringMutation) ClearAttribute() {
	m.clearedattribute = true
	m.clearedFields[attributevariantstring.FieldAttributeID] = struct{}{}
}

// AttributeCleared reports if the "attribute" edge to the Attribute entity was cleared.
func (m *AttributeVariantStringMutation) AttributeCleared() bool {
	return m.clearedattribute
}

// AttributeIDs returns the "attribute" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttributeID instead. It exists only for internal usage by the builders.
func (m *AttributeVariantStringMutation) AttributeIDs() (ids []int) {
	if id := m.attribute; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttribute resets all changes to the "attribute" edge.
func (m *AttributeVariantStringMutation) ResetAttribute() {
	m.attribute = nil
	m.clearedattribute = false
}

// Where appends a list predicates to the AttributeVariantStringMutation builder.
func (m *AttributeVariantStringMutation) Where(ps ...predicate.AttributeVariantString) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttributeVariantStringMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttributeVariantStringMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AttributeVariantString, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttributeVariantStringMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttributeVariantStringMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AttributeVariantString).
func (m *AttributeVariantStringMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeVariantStringMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.attribute != nil {
		fields = append(fields, attributevariantstring.FieldAttributeID)
	}
	if m.value != nil {
		fields = append(fields, attributevariantstring.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeVariantStringMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attributevariantstring.FieldAttributeID:
		return m.AttributeID()
	case attributevariantstring.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeVariantStringMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attributevariantstring.FieldAttributeID:
		return m.OldAttributeID(ctx)
	case attributevariantstring.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown AttributeVariantString field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeVariantStringMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attributevariantstring.FieldAttributeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttributeID(v)
		return nil
	case attributevariantstring.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown AttributeVariantString field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeVariantStringMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeVariantStringMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeVariantStringMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AttributeVariantString numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeVariantStringMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeVariantStringMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeVariantStringMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AttributeVariantString nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeVariantStringMutation) ResetField(name string) error {
	switch name {
	case attributevariantstring.FieldAttributeID:
		m.ResetAttributeID()
		return nil
	case attributevariantstring.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown AttributeVariantString field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeVariantStringMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attribute != nil {
		edges = append(edges, attributevariantstring.EdgeAttribute)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeVariantStringMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attributevariantstring.EdgeAttribute:
		if id := m.attribute; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeVariantStringMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeVariantStringMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeVariantStringMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattribute {
		edges = append(edges, attributevariantstring.EdgeAttribute)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeVariantStringMutation) EdgeCleared(name string) bool {
	switch name {
	case attributevariantstring.EdgeAttribute:
		return m.clearedattribute
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeVariantStringMutation) ClearEdge(name string) error {
	switch name {
	case attributevariantstring.EdgeAttribute:
		m.ClearAttribute()
		return nil
	}
	return fmt.Errorf("unknown AttributeVariantString unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeVariantStringMutation) ResetEdge(name string) error {
	switch name {
	case attributevariantstring.EdgeAttribute:
		m.ResetAttribute()
		return nil
	}
	return fmt.Errorf("unknown AttributeVariantString edge %s", name)
}

// BrandMutation represents an operation that mutates the Brand nodes in the graph.
type BrandMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	clearedFields  map[string]struct{}
	product        map[int]struct{}
	removedproduct map[int]struct{}
	clearedproduct bool
	done           bool
	oldValue       func(context.Context) (*Brand, error)
	predicates     []predicate.Brand
}

var _ ent.Mutation = (*BrandMutation)(nil)

// brandOption allows management of the mutation configuration using functional options.
type brandOption func(*BrandMutation)

// newBrandMutation creates new mutation for the Brand entity.
func newBrandMutation(c config, op Op, opts ...brandOption) *BrandMutation {
	m := &BrandMutation{
		config:        c,
		op:            op,
		typ:           TypeBrand,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBrandID sets the ID field of the mutation.
func withBrandID(id int) brandOption {
	return func(m *BrandMutation) {
		var (
			err   error
			once  sync.Once
			value *Brand
		)
		m.oldValue = func(ctx context.Context) (*Brand, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Brand.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBrand sets the old Brand of the mutation.
func withBrand(node *Brand) brandOption {
	return func(m *BrandMutation) {
		m.oldValue = func(context.Context) (*Brand, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BrandMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BrandMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BrandMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BrandMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Brand.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *BrandMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BrandMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Brand entity.
// If the Brand object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BrandMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BrandMutation) ResetName() {
	m.name = nil
}

// AddProductIDs adds the "product" edge to the Product entity by ids.
func (m *BrandMutation) AddProductIDs(ids ...int) {
	if m.product == nil {
		m.product = make(map[int]struct{})
	}
	for i := range ids {
		m.product[ids[i]] = struct{}{}
	}
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *BrandMutation) ClearProduct() {
	m.clearedproduct = true
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *BrandMutation) ProductCleared() bool {
	return m.clearedproduct
}

// RemoveProductIDs removes the "product" edge to the Product entity by IDs.
func (m *BrandMutation) RemoveProductIDs(ids ...int) {
	if m.removedproduct == nil {
		m.removedproduct = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.product, ids[i])
		m.removedproduct[ids[i]] = struct{}{}
	}
}

// RemovedProduct returns the removed IDs of the "product" edge to the Product entity.
func (m *BrandMutation) RemovedProductIDs() (ids []int) {
	for id := range m.removedproduct {
		ids = append(ids, id)
	}
	return
}

// ProductIDs returns the "product" edge IDs in the mutation.
func (m *BrandMutation) ProductIDs() (ids []int) {
	for id := range m.product {
		ids = append(ids, id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *BrandMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
	m.removedproduct = nil
}

// Where appends a list predicates to the BrandMutation builder.
func (m *BrandMutation) Where(ps ...predicate.Brand) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BrandMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BrandMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Brand, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BrandMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BrandMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Brand).
func (m *BrandMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BrandMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, brand.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BrandMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case brand.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BrandMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case brand.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Brand field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BrandMutation) SetField(name string, value ent.Value) error {
	switch name {
	case brand.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Brand field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BrandMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BrandMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BrandMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Brand numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BrandMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BrandMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BrandMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Brand nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BrandMutation) ResetField(name string) error {
	switch name {
	case brand.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Brand field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BrandMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.product != nil {
		edges = append(edges, brand.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BrandMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case brand.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.product))
		for id := range m.product {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BrandMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproduct != nil {
		edges = append(edges, brand.EdgeProduct)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BrandMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case brand.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.removedproduct))
		for id := range m.removedproduct {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BrandMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproduct {
		edges = append(edges, brand.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BrandMutation) EdgeCleared(name string) bool {
	switch name {
	case brand.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BrandMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Brand unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BrandMutation) ResetEdge(name string) error {
	switch name {
	case brand.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown Brand edge %s", name)
}

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	code                         *int
	addcode                      *int
	barcode                      *string
	name                         *string
	description                  *string
	created_at                   *time.Time
	updated_at                   *time.Time
	clearedFields                map[string]struct{}
	attributeValuesString        map[int]struct{}
	removedattributeValuesString map[int]struct{}
	clearedattributeValuesString bool
	attributeValuesNum           map[int]struct{}
	removedattributeValuesNum    map[int]struct{}
	clearedattributeValuesNum    bool
	attributeValuesBool          map[int]struct{}
	removedattributeValuesBool   map[int]struct{}
	clearedattributeValuesBool   bool
	done                         bool
	oldValue                     func(context.Context) (*Product, error)
	predicates                   []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ProductMutation) SetCode(i int) {
	m.code = &i
	m.addcode = nil
}

// Code returns the value of the "code" field in the mutation.
func (m *ProductMutation) Code() (r int, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldCode(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// AddCode adds i to the "code" field.
func (m *ProductMutation) AddCode(i int) {
	if m.addcode != nil {
		*m.addcode += i
	} else {
		m.addcode = &i
	}
}

// AddedCode returns the value that was added to the "code" field in this mutation.
func (m *ProductMutation) AddedCode() (r int, exists bool) {
	v := m.addcode
	if v == nil {
		return
	}
	return *v, true
}

// ResetCode resets all changes to the "code" field.
func (m *ProductMutation) ResetCode() {
	m.code = nil
	m.addcode = nil
}

// SetBarcode sets the "barcode" field.
func (m *ProductMutation) SetBarcode(s string) {
	m.barcode = &s
}

// Barcode returns the value of the "barcode" field in the mutation.
func (m *ProductMutation) Barcode() (r string, exists bool) {
	v := m.barcode
	if v == nil {
		return
	}
	return *v, true
}

// OldBarcode returns the old "barcode" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldBarcode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBarcode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBarcode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBarcode: %w", err)
	}
	return oldValue.Barcode, nil
}

// ResetBarcode resets all changes to the "barcode" field.
func (m *ProductMutation) ResetBarcode() {
	m.barcode = nil
}

// SetName sets the "name" field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProductMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProductMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProductMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[product.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProductMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[product.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProductMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, product.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProductMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProductMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProductMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProductMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProductMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProductMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddAttributeValuesStringIDs adds the "attributeValuesString" edge to the AttributeValueString entity by ids.
func (m *ProductMutation) AddAttributeValuesStringIDs(ids ...int) {
	if m.attributeValuesString == nil {
		m.attributeValuesString = make(map[int]struct{})
	}
	for i := range ids {
		m.attributeValuesString[ids[i]] = struct{}{}
	}
}

// ClearAttributeValuesString clears the "attributeValuesString" edge to the AttributeValueString entity.
func (m *ProductMutation) ClearAttributeValuesString() {
	m.clearedattributeValuesString = true
}

// AttributeValuesStringCleared reports if the "attributeValuesString" edge to the AttributeValueString entity was cleared.
func (m *ProductMutation) AttributeValuesStringCleared() bool {
	return m.clearedattributeValuesString
}

// RemoveAttributeValuesStringIDs removes the "attributeValuesString" edge to the AttributeValueString entity by IDs.
func (m *ProductMutation) RemoveAttributeValuesStringIDs(ids ...int) {
	if m.removedattributeValuesString == nil {
		m.removedattributeValuesString = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attributeValuesString, ids[i])
		m.removedattributeValuesString[ids[i]] = struct{}{}
	}
}

// RemovedAttributeValuesString returns the removed IDs of the "attributeValuesString" edge to the AttributeValueString entity.
func (m *ProductMutation) RemovedAttributeValuesStringIDs() (ids []int) {
	for id := range m.removedattributeValuesString {
		ids = append(ids, id)
	}
	return
}

// AttributeValuesStringIDs returns the "attributeValuesString" edge IDs in the mutation.
func (m *ProductMutation) AttributeValuesStringIDs() (ids []int) {
	for id := range m.attributeValuesString {
		ids = append(ids, id)
	}
	return
}

// ResetAttributeValuesString resets all changes to the "attributeValuesString" edge.
func (m *ProductMutation) ResetAttributeValuesString() {
	m.attributeValuesString = nil
	m.clearedattributeValuesString = false
	m.removedattributeValuesString = nil
}

// AddAttributeValuesNumIDs adds the "attributeValuesNum" edge to the AttributeValueNum entity by ids.
func (m *ProductMutation) AddAttributeValuesNumIDs(ids ...int) {
	if m.attributeValuesNum == nil {
		m.attributeValuesNum = make(map[int]struct{})
	}
	for i := range ids {
		m.attributeValuesNum[ids[i]] = struct{}{}
	}
}

// ClearAttributeValuesNum clears the "attributeValuesNum" edge to the AttributeValueNum entity.
func (m *ProductMutation) ClearAttributeValuesNum() {
	m.clearedattributeValuesNum = true
}

// AttributeValuesNumCleared reports if the "attributeValuesNum" edge to the AttributeValueNum entity was cleared.
func (m *ProductMutation) AttributeValuesNumCleared() bool {
	return m.clearedattributeValuesNum
}

// RemoveAttributeValuesNumIDs removes the "attributeValuesNum" edge to the AttributeValueNum entity by IDs.
func (m *ProductMutation) RemoveAttributeValuesNumIDs(ids ...int) {
	if m.removedattributeValuesNum == nil {
		m.removedattributeValuesNum = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attributeValuesNum, ids[i])
		m.removedattributeValuesNum[ids[i]] = struct{}{}
	}
}

// RemovedAttributeValuesNum returns the removed IDs of the "attributeValuesNum" edge to the AttributeValueNum entity.
func (m *ProductMutation) RemovedAttributeValuesNumIDs() (ids []int) {
	for id := range m.removedattributeValuesNum {
		ids = append(ids, id)
	}
	return
}

// AttributeValuesNumIDs returns the "attributeValuesNum" edge IDs in the mutation.
func (m *ProductMutation) AttributeValuesNumIDs() (ids []int) {
	for id := range m.attributeValuesNum {
		ids = append(ids, id)
	}
	return
}

// ResetAttributeValuesNum resets all changes to the "attributeValuesNum" edge.
func (m *ProductMutation) ResetAttributeValuesNum() {
	m.attributeValuesNum = nil
	m.clearedattributeValuesNum = false
	m.removedattributeValuesNum = nil
}

// AddAttributeValuesBoolIDs adds the "attributeValuesBool" edge to the AttributeValueBool entity by ids.
func (m *ProductMutation) AddAttributeValuesBoolIDs(ids ...int) {
	if m.attributeValuesBool == nil {
		m.attributeValuesBool = make(map[int]struct{})
	}
	for i := range ids {
		m.attributeValuesBool[ids[i]] = struct{}{}
	}
}

// ClearAttributeValuesBool clears the "attributeValuesBool" edge to the AttributeValueBool entity.
func (m *ProductMutation) ClearAttributeValuesBool() {
	m.clearedattributeValuesBool = true
}

// AttributeValuesBoolCleared reports if the "attributeValuesBool" edge to the AttributeValueBool entity was cleared.
func (m *ProductMutation) AttributeValuesBoolCleared() bool {
	return m.clearedattributeValuesBool
}

// RemoveAttributeValuesBoolIDs removes the "attributeValuesBool" edge to the AttributeValueBool entity by IDs.
func (m *ProductMutation) RemoveAttributeValuesBoolIDs(ids ...int) {
	if m.removedattributeValuesBool == nil {
		m.removedattributeValuesBool = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attributeValuesBool, ids[i])
		m.removedattributeValuesBool[ids[i]] = struct{}{}
	}
}

// RemovedAttributeValuesBool returns the removed IDs of the "attributeValuesBool" edge to the AttributeValueBool entity.
func (m *ProductMutation) RemovedAttributeValuesBoolIDs() (ids []int) {
	for id := range m.removedattributeValuesBool {
		ids = append(ids, id)
	}
	return
}

// AttributeValuesBoolIDs returns the "attributeValuesBool" edge IDs in the mutation.
func (m *ProductMutation) AttributeValuesBoolIDs() (ids []int) {
	for id := range m.attributeValuesBool {
		ids = append(ids, id)
	}
	return
}

// ResetAttributeValuesBool resets all changes to the "attributeValuesBool" edge.
func (m *ProductMutation) ResetAttributeValuesBool() {
	m.attributeValuesBool = nil
	m.clearedattributeValuesBool = false
	m.removedattributeValuesBool = nil
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Product, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.code != nil {
		fields = append(fields, product.FieldCode)
	}
	if m.barcode != nil {
		fields = append(fields, product.FieldBarcode)
	}
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	if m.description != nil {
		fields = append(fields, product.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, product.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, product.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldCode:
		return m.Code()
	case product.FieldBarcode:
		return m.Barcode()
	case product.FieldName:
		return m.Name()
	case product.FieldDescription:
		return m.Description()
	case product.FieldCreatedAt:
		return m.CreatedAt()
	case product.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldCode:
		return m.OldCode(ctx)
	case product.FieldBarcode:
		return m.OldBarcode(ctx)
	case product.FieldName:
		return m.OldName(ctx)
	case product.FieldDescription:
		return m.OldDescription(ctx)
	case product.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case product.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case product.FieldBarcode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBarcode(v)
		return nil
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case product.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case product.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case product.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	var fields []string
	if m.addcode != nil {
		fields = append(fields, product.FieldCode)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case product.FieldCode:
		return m.AddedCode()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	case product.FieldCode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCode(v)
		return nil
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(product.FieldDescription) {
		fields = append(fields, product.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	switch name {
	case product.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldCode:
		m.ResetCode()
		return nil
	case product.FieldBarcode:
		m.ResetBarcode()
		return nil
	case product.FieldName:
		m.ResetName()
		return nil
	case product.FieldDescription:
		m.ResetDescription()
		return nil
	case product.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case product.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.attributeValuesString != nil {
		edges = append(edges, product.EdgeAttributeValuesString)
	}
	if m.attributeValuesNum != nil {
		edges = append(edges, product.EdgeAttributeValuesNum)
	}
	if m.attributeValuesBool != nil {
		edges = append(edges, product.EdgeAttributeValuesBool)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeAttributeValuesString:
		ids := make([]ent.Value, 0, len(m.attributeValuesString))
		for id := range m.attributeValuesString {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeAttributeValuesNum:
		ids := make([]ent.Value, 0, len(m.attributeValuesNum))
		for id := range m.attributeValuesNum {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeAttributeValuesBool:
		ids := make([]ent.Value, 0, len(m.attributeValuesBool))
		for id := range m.attributeValuesBool {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedattributeValuesString != nil {
		edges = append(edges, product.EdgeAttributeValuesString)
	}
	if m.removedattributeValuesNum != nil {
		edges = append(edges, product.EdgeAttributeValuesNum)
	}
	if m.removedattributeValuesBool != nil {
		edges = append(edges, product.EdgeAttributeValuesBool)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeAttributeValuesString:
		ids := make([]ent.Value, 0, len(m.removedattributeValuesString))
		for id := range m.removedattributeValuesString {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeAttributeValuesNum:
		ids := make([]ent.Value, 0, len(m.removedattributeValuesNum))
		for id := range m.removedattributeValuesNum {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeAttributeValuesBool:
		ids := make([]ent.Value, 0, len(m.removedattributeValuesBool))
		for id := range m.removedattributeValuesBool {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedattributeValuesString {
		edges = append(edges, product.EdgeAttributeValuesString)
	}
	if m.clearedattributeValuesNum {
		edges = append(edges, product.EdgeAttributeValuesNum)
	}
	if m.clearedattributeValuesBool {
		edges = append(edges, product.EdgeAttributeValuesBool)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	switch name {
	case product.EdgeAttributeValuesString:
		return m.clearedattributeValuesString
	case product.EdgeAttributeValuesNum:
		return m.clearedattributeValuesNum
	case product.EdgeAttributeValuesBool:
		return m.clearedattributeValuesBool
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	switch name {
	case product.EdgeAttributeValuesString:
		m.ResetAttributeValuesString()
		return nil
	case product.EdgeAttributeValuesNum:
		m.ResetAttributeValuesNum()
		return nil
	case product.EdgeAttributeValuesBool:
		m.ResetAttributeValuesBool()
		return nil
	}
	return fmt.Errorf("unknown Product edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	login           *string
	password        *string
	first_name      *string
	last_name       *string
	role            *string
	phonenumber     *string
	email           *string
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	token           *string
	refresh_token   *string
	clearedFields   map[string]struct{}
	settings        *int
	clearedsettings bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLogin sets the "login" field.
func (m *UserMutation) SetLogin(s string) {
	m.login = &s
}

// Login returns the value of the "login" field in the mutation.
func (m *UserMutation) Login() (r string, exists bool) {
	v := m.login
	if v == nil {
		return
	}
	return *v, true
}

// OldLogin returns the old "login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogin: %w", err)
	}
	return oldValue.Login, nil
}

// ResetLogin resets all changes to the "login" field.
func (m *UserMutation) ResetLogin() {
	m.login = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *UserMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[user.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *UserMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[user.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, user.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *UserMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[user.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *UserMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[user.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, user.FieldLastName)
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetPhonenumber sets the "phonenumber" field.
func (m *UserMutation) SetPhonenumber(s string) {
	m.phonenumber = &s
}

// Phonenumber returns the value of the "phonenumber" field in the mutation.
func (m *UserMutation) Phonenumber() (r string, exists bool) {
	v := m.phonenumber
	if v == nil {
		return
	}
	return *v, true
}

// OldPhonenumber returns the old "phonenumber" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhonenumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhonenumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhonenumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhonenumber: %w", err)
	}
	return oldValue.Phonenumber, nil
}

// ClearPhonenumber clears the value of the "phonenumber" field.
func (m *UserMutation) ClearPhonenumber() {
	m.phonenumber = nil
	m.clearedFields[user.FieldPhonenumber] = struct{}{}
}

// PhonenumberCleared returns if the "phonenumber" field was cleared in this mutation.
func (m *UserMutation) PhonenumberCleared() bool {
	_, ok := m.clearedFields[user.FieldPhonenumber]
	return ok
}

// ResetPhonenumber resets all changes to the "phonenumber" field.
func (m *UserMutation) ResetPhonenumber() {
	m.phonenumber = nil
	delete(m.clearedFields, user.FieldPhonenumber)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetToken sets the "token" field.
func (m *UserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *UserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *UserMutation) ResetToken() {
	m.token = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *UserMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *UserMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRefreshToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *UserMutation) ResetRefreshToken() {
	m.refresh_token = nil
}

// SetSettingsID sets the "settings" edge to the UserSettings entity by id.
func (m *UserMutation) SetSettingsID(id int) {
	m.settings = &id
}

// ClearSettings clears the "settings" edge to the UserSettings entity.
func (m *UserMutation) ClearSettings() {
	m.clearedsettings = true
}

// SettingsCleared reports if the "settings" edge to the UserSettings entity was cleared.
func (m *UserMutation) SettingsCleared() bool {
	return m.clearedsettings
}

// SettingsID returns the "settings" edge ID in the mutation.
func (m *UserMutation) SettingsID() (id int, exists bool) {
	if m.settings != nil {
		return *m.settings, true
	}
	return
}

// SettingsIDs returns the "settings" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SettingsID instead. It exists only for internal usage by the builders.
func (m *UserMutation) SettingsIDs() (ids []int) {
	if id := m.settings; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSettings resets all changes to the "settings" edge.
func (m *UserMutation) ResetSettings() {
	m.settings = nil
	m.clearedsettings = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.login != nil {
		fields = append(fields, user.FieldLogin)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.phonenumber != nil {
		fields = append(fields, user.FieldPhonenumber)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.token != nil {
		fields = append(fields, user.FieldToken)
	}
	if m.refresh_token != nil {
		fields = append(fields, user.FieldRefreshToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldLogin:
		return m.Login()
	case user.FieldPassword:
		return m.Password()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldRole:
		return m.Role()
	case user.FieldPhonenumber:
		return m.Phonenumber()
	case user.FieldEmail:
		return m.Email()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	case user.FieldToken:
		return m.Token()
	case user.FieldRefreshToken:
		return m.RefreshToken()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldLogin:
		return m.OldLogin(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldPhonenumber:
		return m.OldPhonenumber(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case user.FieldToken:
		return m.OldToken(ctx)
	case user.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogin(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldPhonenumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhonenumber(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case user.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case user.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldFirstName) {
		fields = append(fields, user.FieldFirstName)
	}
	if m.FieldCleared(user.FieldLastName) {
		fields = append(fields, user.FieldLastName)
	}
	if m.FieldCleared(user.FieldPhonenumber) {
		fields = append(fields, user.FieldPhonenumber)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ClearFirstName()
		return nil
	case user.FieldLastName:
		m.ClearLastName()
		return nil
	case user.FieldPhonenumber:
		m.ClearPhonenumber()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldLogin:
		m.ResetLogin()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldPhonenumber:
		m.ResetPhonenumber()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case user.FieldToken:
		m.ResetToken()
		return nil
	case user.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.settings != nil {
		edges = append(edges, user.EdgeSettings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSettings:
		if id := m.settings; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsettings {
		edges = append(edges, user.EdgeSettings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSettings:
		return m.clearedsettings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeSettings:
		m.ClearSettings()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSettings:
		m.ResetSettings()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserSettingsMutation represents an operation that mutates the UserSettings nodes in the graph.
type UserSettingsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	frontend      *schema.DefaultSetting
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserSettings, error)
	predicates    []predicate.UserSettings
}

var _ ent.Mutation = (*UserSettingsMutation)(nil)

// usersettingsOption allows management of the mutation configuration using functional options.
type usersettingsOption func(*UserSettingsMutation)

// newUserSettingsMutation creates new mutation for the UserSettings entity.
func newUserSettingsMutation(c config, op Op, opts ...usersettingsOption) *UserSettingsMutation {
	m := &UserSettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeUserSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserSettingsID sets the ID field of the mutation.
func withUserSettingsID(id int) usersettingsOption {
	return func(m *UserSettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *UserSettings
		)
		m.oldValue = func(ctx context.Context) (*UserSettings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserSettings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserSettings sets the old UserSettings of the mutation.
func withUserSettings(node *UserSettings) usersettingsOption {
	return func(m *UserSettingsMutation) {
		m.oldValue = func(context.Context) (*UserSettings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserSettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserSettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserSettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserSettingsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserSettings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFrontend sets the "frontend" field.
func (m *UserSettingsMutation) SetFrontend(ss schema.DefaultSetting) {
	m.frontend = &ss
}

// Frontend returns the value of the "frontend" field in the mutation.
func (m *UserSettingsMutation) Frontend() (r schema.DefaultSetting, exists bool) {
	v := m.frontend
	if v == nil {
		return
	}
	return *v, true
}

// OldFrontend returns the old "frontend" field's value of the UserSettings entity.
// If the UserSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingsMutation) OldFrontend(ctx context.Context) (v schema.DefaultSetting, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrontend is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrontend requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrontend: %w", err)
	}
	return oldValue.Frontend, nil
}

// ResetFrontend resets all changes to the "frontend" field.
func (m *UserSettingsMutation) ResetFrontend() {
	m.frontend = nil
}

// Where appends a list predicates to the UserSettingsMutation builder.
func (m *UserSettingsMutation) Where(ps ...predicate.UserSettings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserSettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserSettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserSettings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserSettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserSettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserSettings).
func (m *UserSettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserSettingsMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.frontend != nil {
		fields = append(fields, usersettings.FieldFrontend)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserSettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usersettings.FieldFrontend:
		return m.Frontend()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserSettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usersettings.FieldFrontend:
		return m.OldFrontend(ctx)
	}
	return nil, fmt.Errorf("unknown UserSettings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usersettings.FieldFrontend:
		v, ok := value.(schema.DefaultSetting)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrontend(v)
		return nil
	}
	return fmt.Errorf("unknown UserSettings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserSettingsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserSettingsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserSettings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserSettingsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserSettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserSettingsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserSettings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserSettingsMutation) ResetField(name string) error {
	switch name {
	case usersettings.FieldFrontend:
		m.ResetFrontend()
		return nil
	}
	return fmt.Errorf("unknown UserSettings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserSettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserSettingsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserSettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserSettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserSettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserSettingsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserSettingsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserSettings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserSettingsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserSettings edge %s", name)
}
