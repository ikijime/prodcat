// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"prodcat/ent/attributevaluebool"
	"prodcat/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeValueBoolDelete is the builder for deleting a AttributeValueBool entity.
type AttributeValueBoolDelete struct {
	config
	hooks    []Hook
	mutation *AttributeValueBoolMutation
}

// Where appends a list predicates to the AttributeValueBoolDelete builder.
func (avbd *AttributeValueBoolDelete) Where(ps ...predicate.AttributeValueBool) *AttributeValueBoolDelete {
	avbd.mutation.Where(ps...)
	return avbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (avbd *AttributeValueBoolDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, avbd.sqlExec, avbd.mutation, avbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (avbd *AttributeValueBoolDelete) ExecX(ctx context.Context) int {
	n, err := avbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (avbd *AttributeValueBoolDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(attributevaluebool.Table, sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt))
	if ps := avbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, avbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	avbd.mutation.done = true
	return affected, err
}

// AttributeValueBoolDeleteOne is the builder for deleting a single AttributeValueBool entity.
type AttributeValueBoolDeleteOne struct {
	avbd *AttributeValueBoolDelete
}

// Where appends a list predicates to the AttributeValueBoolDelete builder.
func (avbdo *AttributeValueBoolDeleteOne) Where(ps ...predicate.AttributeValueBool) *AttributeValueBoolDeleteOne {
	avbdo.avbd.mutation.Where(ps...)
	return avbdo
}

// Exec executes the deletion query.
func (avbdo *AttributeValueBoolDeleteOne) Exec(ctx context.Context) error {
	n, err := avbdo.avbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{attributevaluebool.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (avbdo *AttributeValueBoolDeleteOne) ExecX(ctx context.Context) {
	if err := avbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
