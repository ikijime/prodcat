// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"prodcat/ent/migrate"

	"prodcat/ent/attribute"
	"prodcat/ent/attributevaluebool"
	"prodcat/ent/attributevaluenum"
	"prodcat/ent/attributevaluestring"
	"prodcat/ent/attributevariantnum"
	"prodcat/ent/attributevariantstring"
	"prodcat/ent/brand"
	"prodcat/ent/product"
	"prodcat/ent/user"
	"prodcat/ent/usersettings"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Attribute is the client for interacting with the Attribute builders.
	Attribute *AttributeClient
	// AttributeValueBool is the client for interacting with the AttributeValueBool builders.
	AttributeValueBool *AttributeValueBoolClient
	// AttributeValueNum is the client for interacting with the AttributeValueNum builders.
	AttributeValueNum *AttributeValueNumClient
	// AttributeValueString is the client for interacting with the AttributeValueString builders.
	AttributeValueString *AttributeValueStringClient
	// AttributeVariantNum is the client for interacting with the AttributeVariantNum builders.
	AttributeVariantNum *AttributeVariantNumClient
	// AttributeVariantString is the client for interacting with the AttributeVariantString builders.
	AttributeVariantString *AttributeVariantStringClient
	// Brand is the client for interacting with the Brand builders.
	Brand *BrandClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserSettings is the client for interacting with the UserSettings builders.
	UserSettings *UserSettingsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Attribute = NewAttributeClient(c.config)
	c.AttributeValueBool = NewAttributeValueBoolClient(c.config)
	c.AttributeValueNum = NewAttributeValueNumClient(c.config)
	c.AttributeValueString = NewAttributeValueStringClient(c.config)
	c.AttributeVariantNum = NewAttributeVariantNumClient(c.config)
	c.AttributeVariantString = NewAttributeVariantStringClient(c.config)
	c.Brand = NewBrandClient(c.config)
	c.Product = NewProductClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserSettings = NewUserSettingsClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		Attribute:              NewAttributeClient(cfg),
		AttributeValueBool:     NewAttributeValueBoolClient(cfg),
		AttributeValueNum:      NewAttributeValueNumClient(cfg),
		AttributeValueString:   NewAttributeValueStringClient(cfg),
		AttributeVariantNum:    NewAttributeVariantNumClient(cfg),
		AttributeVariantString: NewAttributeVariantStringClient(cfg),
		Brand:                  NewBrandClient(cfg),
		Product:                NewProductClient(cfg),
		User:                   NewUserClient(cfg),
		UserSettings:           NewUserSettingsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		Attribute:              NewAttributeClient(cfg),
		AttributeValueBool:     NewAttributeValueBoolClient(cfg),
		AttributeValueNum:      NewAttributeValueNumClient(cfg),
		AttributeValueString:   NewAttributeValueStringClient(cfg),
		AttributeVariantNum:    NewAttributeVariantNumClient(cfg),
		AttributeVariantString: NewAttributeVariantStringClient(cfg),
		Brand:                  NewBrandClient(cfg),
		Product:                NewProductClient(cfg),
		User:                   NewUserClient(cfg),
		UserSettings:           NewUserSettingsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Attribute.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Attribute, c.AttributeValueBool, c.AttributeValueNum, c.AttributeValueString,
		c.AttributeVariantNum, c.AttributeVariantString, c.Brand, c.Product, c.User,
		c.UserSettings,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Attribute, c.AttributeValueBool, c.AttributeValueNum, c.AttributeValueString,
		c.AttributeVariantNum, c.AttributeVariantString, c.Brand, c.Product, c.User,
		c.UserSettings,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AttributeMutation:
		return c.Attribute.mutate(ctx, m)
	case *AttributeValueBoolMutation:
		return c.AttributeValueBool.mutate(ctx, m)
	case *AttributeValueNumMutation:
		return c.AttributeValueNum.mutate(ctx, m)
	case *AttributeValueStringMutation:
		return c.AttributeValueString.mutate(ctx, m)
	case *AttributeVariantNumMutation:
		return c.AttributeVariantNum.mutate(ctx, m)
	case *AttributeVariantStringMutation:
		return c.AttributeVariantString.mutate(ctx, m)
	case *BrandMutation:
		return c.Brand.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserSettingsMutation:
		return c.UserSettings.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AttributeClient is a client for the Attribute schema.
type AttributeClient struct {
	config
}

// NewAttributeClient returns a client for the Attribute from the given config.
func NewAttributeClient(c config) *AttributeClient {
	return &AttributeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attribute.Hooks(f(g(h())))`.
func (c *AttributeClient) Use(hooks ...Hook) {
	c.hooks.Attribute = append(c.hooks.Attribute, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attribute.Intercept(f(g(h())))`.
func (c *AttributeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Attribute = append(c.inters.Attribute, interceptors...)
}

// Create returns a builder for creating a Attribute entity.
func (c *AttributeClient) Create() *AttributeCreate {
	mutation := newAttributeMutation(c.config, OpCreate)
	return &AttributeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attribute entities.
func (c *AttributeClient) CreateBulk(builders ...*AttributeCreate) *AttributeCreateBulk {
	return &AttributeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttributeClient) MapCreateBulk(slice any, setFunc func(*AttributeCreate, int)) *AttributeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttributeCreateBulk{err: fmt.Errorf("calling to AttributeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttributeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttributeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attribute.
func (c *AttributeClient) Update() *AttributeUpdate {
	mutation := newAttributeMutation(c.config, OpUpdate)
	return &AttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeClient) UpdateOne(a *Attribute) *AttributeUpdateOne {
	mutation := newAttributeMutation(c.config, OpUpdateOne, withAttribute(a))
	return &AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeClient) UpdateOneID(id int) *AttributeUpdateOne {
	mutation := newAttributeMutation(c.config, OpUpdateOne, withAttributeID(id))
	return &AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attribute.
func (c *AttributeClient) Delete() *AttributeDelete {
	mutation := newAttributeMutation(c.config, OpDelete)
	return &AttributeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttributeClient) DeleteOne(a *Attribute) *AttributeDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttributeClient) DeleteOneID(id int) *AttributeDeleteOne {
	builder := c.Delete().Where(attribute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeDeleteOne{builder}
}

// Query returns a query builder for Attribute.
func (c *AttributeClient) Query() *AttributeQuery {
	return &AttributeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttribute},
		inters: c.Interceptors(),
	}
}

// Get returns a Attribute entity by its id.
func (c *AttributeClient) Get(ctx context.Context, id int) (*Attribute, error) {
	return c.Query().Where(attribute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeClient) GetX(ctx context.Context, id int) *Attribute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttributeValuesBool queries the attributeValuesBool edge of a Attribute.
func (c *AttributeClient) QueryAttributeValuesBool(a *Attribute) *AttributeValueBoolQuery {
	query := (&AttributeValueBoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attribute.Table, attribute.FieldID, id),
			sqlgraph.To(attributevaluebool.Table, attributevaluebool.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attribute.AttributeValuesBoolTable, attribute.AttributeValuesBoolColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttributeVariantsString queries the attributeVariantsString edge of a Attribute.
func (c *AttributeClient) QueryAttributeVariantsString(a *Attribute) *AttributeVariantStringQuery {
	query := (&AttributeVariantStringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attribute.Table, attribute.FieldID, id),
			sqlgraph.To(attributevariantstring.Table, attributevariantstring.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attribute.AttributeVariantsStringTable, attribute.AttributeVariantsStringColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttributeVariantsNum queries the attributeVariantsNum edge of a Attribute.
func (c *AttributeClient) QueryAttributeVariantsNum(a *Attribute) *AttributeVariantNumQuery {
	query := (&AttributeVariantNumClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attribute.Table, attribute.FieldID, id),
			sqlgraph.To(attributevariantnum.Table, attributevariantnum.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attribute.AttributeVariantsNumTable, attribute.AttributeVariantsNumColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttributeClient) Hooks() []Hook {
	return c.hooks.Attribute
}

// Interceptors returns the client interceptors.
func (c *AttributeClient) Interceptors() []Interceptor {
	return c.inters.Attribute
}

func (c *AttributeClient) mutate(ctx context.Context, m *AttributeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttributeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttributeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Attribute mutation op: %q", m.Op())
	}
}

// AttributeValueBoolClient is a client for the AttributeValueBool schema.
type AttributeValueBoolClient struct {
	config
}

// NewAttributeValueBoolClient returns a client for the AttributeValueBool from the given config.
func NewAttributeValueBoolClient(c config) *AttributeValueBoolClient {
	return &AttributeValueBoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attributevaluebool.Hooks(f(g(h())))`.
func (c *AttributeValueBoolClient) Use(hooks ...Hook) {
	c.hooks.AttributeValueBool = append(c.hooks.AttributeValueBool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attributevaluebool.Intercept(f(g(h())))`.
func (c *AttributeValueBoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.AttributeValueBool = append(c.inters.AttributeValueBool, interceptors...)
}

// Create returns a builder for creating a AttributeValueBool entity.
func (c *AttributeValueBoolClient) Create() *AttributeValueBoolCreate {
	mutation := newAttributeValueBoolMutation(c.config, OpCreate)
	return &AttributeValueBoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AttributeValueBool entities.
func (c *AttributeValueBoolClient) CreateBulk(builders ...*AttributeValueBoolCreate) *AttributeValueBoolCreateBulk {
	return &AttributeValueBoolCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttributeValueBoolClient) MapCreateBulk(slice any, setFunc func(*AttributeValueBoolCreate, int)) *AttributeValueBoolCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttributeValueBoolCreateBulk{err: fmt.Errorf("calling to AttributeValueBoolClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttributeValueBoolCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttributeValueBoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AttributeValueBool.
func (c *AttributeValueBoolClient) Update() *AttributeValueBoolUpdate {
	mutation := newAttributeValueBoolMutation(c.config, OpUpdate)
	return &AttributeValueBoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeValueBoolClient) UpdateOne(avb *AttributeValueBool) *AttributeValueBoolUpdateOne {
	mutation := newAttributeValueBoolMutation(c.config, OpUpdateOne, withAttributeValueBool(avb))
	return &AttributeValueBoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeValueBoolClient) UpdateOneID(id int) *AttributeValueBoolUpdateOne {
	mutation := newAttributeValueBoolMutation(c.config, OpUpdateOne, withAttributeValueBoolID(id))
	return &AttributeValueBoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AttributeValueBool.
func (c *AttributeValueBoolClient) Delete() *AttributeValueBoolDelete {
	mutation := newAttributeValueBoolMutation(c.config, OpDelete)
	return &AttributeValueBoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttributeValueBoolClient) DeleteOne(avb *AttributeValueBool) *AttributeValueBoolDeleteOne {
	return c.DeleteOneID(avb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttributeValueBoolClient) DeleteOneID(id int) *AttributeValueBoolDeleteOne {
	builder := c.Delete().Where(attributevaluebool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeValueBoolDeleteOne{builder}
}

// Query returns a query builder for AttributeValueBool.
func (c *AttributeValueBoolClient) Query() *AttributeValueBoolQuery {
	return &AttributeValueBoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttributeValueBool},
		inters: c.Interceptors(),
	}
}

// Get returns a AttributeValueBool entity by its id.
func (c *AttributeValueBoolClient) Get(ctx context.Context, id int) (*AttributeValueBool, error) {
	return c.Query().Where(attributevaluebool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeValueBoolClient) GetX(ctx context.Context, id int) *AttributeValueBool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttribute queries the attribute edge of a AttributeValueBool.
func (c *AttributeValueBoolClient) QueryAttribute(avb *AttributeValueBool) *AttributeQuery {
	query := (&AttributeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := avb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevaluebool.Table, attributevaluebool.FieldID, id),
			sqlgraph.To(attribute.Table, attribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevaluebool.AttributeTable, attributevaluebool.AttributeColumn),
		)
		fromV = sqlgraph.Neighbors(avb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a AttributeValueBool.
func (c *AttributeValueBoolClient) QueryProduct(avb *AttributeValueBool) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := avb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevaluebool.Table, attributevaluebool.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevaluebool.ProductTable, attributevaluebool.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(avb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttributeValueBoolClient) Hooks() []Hook {
	return c.hooks.AttributeValueBool
}

// Interceptors returns the client interceptors.
func (c *AttributeValueBoolClient) Interceptors() []Interceptor {
	return c.inters.AttributeValueBool
}

func (c *AttributeValueBoolClient) mutate(ctx context.Context, m *AttributeValueBoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttributeValueBoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttributeValueBoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttributeValueBoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttributeValueBoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AttributeValueBool mutation op: %q", m.Op())
	}
}

// AttributeValueNumClient is a client for the AttributeValueNum schema.
type AttributeValueNumClient struct {
	config
}

// NewAttributeValueNumClient returns a client for the AttributeValueNum from the given config.
func NewAttributeValueNumClient(c config) *AttributeValueNumClient {
	return &AttributeValueNumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attributevaluenum.Hooks(f(g(h())))`.
func (c *AttributeValueNumClient) Use(hooks ...Hook) {
	c.hooks.AttributeValueNum = append(c.hooks.AttributeValueNum, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attributevaluenum.Intercept(f(g(h())))`.
func (c *AttributeValueNumClient) Intercept(interceptors ...Interceptor) {
	c.inters.AttributeValueNum = append(c.inters.AttributeValueNum, interceptors...)
}

// Create returns a builder for creating a AttributeValueNum entity.
func (c *AttributeValueNumClient) Create() *AttributeValueNumCreate {
	mutation := newAttributeValueNumMutation(c.config, OpCreate)
	return &AttributeValueNumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AttributeValueNum entities.
func (c *AttributeValueNumClient) CreateBulk(builders ...*AttributeValueNumCreate) *AttributeValueNumCreateBulk {
	return &AttributeValueNumCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttributeValueNumClient) MapCreateBulk(slice any, setFunc func(*AttributeValueNumCreate, int)) *AttributeValueNumCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttributeValueNumCreateBulk{err: fmt.Errorf("calling to AttributeValueNumClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttributeValueNumCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttributeValueNumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AttributeValueNum.
func (c *AttributeValueNumClient) Update() *AttributeValueNumUpdate {
	mutation := newAttributeValueNumMutation(c.config, OpUpdate)
	return &AttributeValueNumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeValueNumClient) UpdateOne(avn *AttributeValueNum) *AttributeValueNumUpdateOne {
	mutation := newAttributeValueNumMutation(c.config, OpUpdateOne, withAttributeValueNum(avn))
	return &AttributeValueNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeValueNumClient) UpdateOneID(id int) *AttributeValueNumUpdateOne {
	mutation := newAttributeValueNumMutation(c.config, OpUpdateOne, withAttributeValueNumID(id))
	return &AttributeValueNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AttributeValueNum.
func (c *AttributeValueNumClient) Delete() *AttributeValueNumDelete {
	mutation := newAttributeValueNumMutation(c.config, OpDelete)
	return &AttributeValueNumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttributeValueNumClient) DeleteOne(avn *AttributeValueNum) *AttributeValueNumDeleteOne {
	return c.DeleteOneID(avn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttributeValueNumClient) DeleteOneID(id int) *AttributeValueNumDeleteOne {
	builder := c.Delete().Where(attributevaluenum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeValueNumDeleteOne{builder}
}

// Query returns a query builder for AttributeValueNum.
func (c *AttributeValueNumClient) Query() *AttributeValueNumQuery {
	return &AttributeValueNumQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttributeValueNum},
		inters: c.Interceptors(),
	}
}

// Get returns a AttributeValueNum entity by its id.
func (c *AttributeValueNumClient) Get(ctx context.Context, id int) (*AttributeValueNum, error) {
	return c.Query().Where(attributevaluenum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeValueNumClient) GetX(ctx context.Context, id int) *AttributeValueNum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVariant queries the variant edge of a AttributeValueNum.
func (c *AttributeValueNumClient) QueryVariant(avn *AttributeValueNum) *AttributeVariantNumQuery {
	query := (&AttributeVariantNumClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := avn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevaluenum.Table, attributevaluenum.FieldID, id),
			sqlgraph.To(attributevariantnum.Table, attributevariantnum.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, attributevaluenum.VariantTable, attributevaluenum.VariantColumn),
		)
		fromV = sqlgraph.Neighbors(avn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a AttributeValueNum.
func (c *AttributeValueNumClient) QueryProduct(avn *AttributeValueNum) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := avn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevaluenum.Table, attributevaluenum.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevaluenum.ProductTable, attributevaluenum.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(avn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttributeValueNumClient) Hooks() []Hook {
	return c.hooks.AttributeValueNum
}

// Interceptors returns the client interceptors.
func (c *AttributeValueNumClient) Interceptors() []Interceptor {
	return c.inters.AttributeValueNum
}

func (c *AttributeValueNumClient) mutate(ctx context.Context, m *AttributeValueNumMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttributeValueNumCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttributeValueNumUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttributeValueNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttributeValueNumDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AttributeValueNum mutation op: %q", m.Op())
	}
}

// AttributeValueStringClient is a client for the AttributeValueString schema.
type AttributeValueStringClient struct {
	config
}

// NewAttributeValueStringClient returns a client for the AttributeValueString from the given config.
func NewAttributeValueStringClient(c config) *AttributeValueStringClient {
	return &AttributeValueStringClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attributevaluestring.Hooks(f(g(h())))`.
func (c *AttributeValueStringClient) Use(hooks ...Hook) {
	c.hooks.AttributeValueString = append(c.hooks.AttributeValueString, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attributevaluestring.Intercept(f(g(h())))`.
func (c *AttributeValueStringClient) Intercept(interceptors ...Interceptor) {
	c.inters.AttributeValueString = append(c.inters.AttributeValueString, interceptors...)
}

// Create returns a builder for creating a AttributeValueString entity.
func (c *AttributeValueStringClient) Create() *AttributeValueStringCreate {
	mutation := newAttributeValueStringMutation(c.config, OpCreate)
	return &AttributeValueStringCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AttributeValueString entities.
func (c *AttributeValueStringClient) CreateBulk(builders ...*AttributeValueStringCreate) *AttributeValueStringCreateBulk {
	return &AttributeValueStringCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttributeValueStringClient) MapCreateBulk(slice any, setFunc func(*AttributeValueStringCreate, int)) *AttributeValueStringCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttributeValueStringCreateBulk{err: fmt.Errorf("calling to AttributeValueStringClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttributeValueStringCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttributeValueStringCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AttributeValueString.
func (c *AttributeValueStringClient) Update() *AttributeValueStringUpdate {
	mutation := newAttributeValueStringMutation(c.config, OpUpdate)
	return &AttributeValueStringUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeValueStringClient) UpdateOne(avs *AttributeValueString) *AttributeValueStringUpdateOne {
	mutation := newAttributeValueStringMutation(c.config, OpUpdateOne, withAttributeValueString(avs))
	return &AttributeValueStringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeValueStringClient) UpdateOneID(id int) *AttributeValueStringUpdateOne {
	mutation := newAttributeValueStringMutation(c.config, OpUpdateOne, withAttributeValueStringID(id))
	return &AttributeValueStringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AttributeValueString.
func (c *AttributeValueStringClient) Delete() *AttributeValueStringDelete {
	mutation := newAttributeValueStringMutation(c.config, OpDelete)
	return &AttributeValueStringDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttributeValueStringClient) DeleteOne(avs *AttributeValueString) *AttributeValueStringDeleteOne {
	return c.DeleteOneID(avs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttributeValueStringClient) DeleteOneID(id int) *AttributeValueStringDeleteOne {
	builder := c.Delete().Where(attributevaluestring.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeValueStringDeleteOne{builder}
}

// Query returns a query builder for AttributeValueString.
func (c *AttributeValueStringClient) Query() *AttributeValueStringQuery {
	return &AttributeValueStringQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttributeValueString},
		inters: c.Interceptors(),
	}
}

// Get returns a AttributeValueString entity by its id.
func (c *AttributeValueStringClient) Get(ctx context.Context, id int) (*AttributeValueString, error) {
	return c.Query().Where(attributevaluestring.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeValueStringClient) GetX(ctx context.Context, id int) *AttributeValueString {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVariant queries the variant edge of a AttributeValueString.
func (c *AttributeValueStringClient) QueryVariant(avs *AttributeValueString) *AttributeVariantStringQuery {
	query := (&AttributeVariantStringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := avs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevaluestring.Table, attributevaluestring.FieldID, id),
			sqlgraph.To(attributevariantstring.Table, attributevariantstring.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, attributevaluestring.VariantTable, attributevaluestring.VariantColumn),
		)
		fromV = sqlgraph.Neighbors(avs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a AttributeValueString.
func (c *AttributeValueStringClient) QueryProduct(avs *AttributeValueString) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := avs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevaluestring.Table, attributevaluestring.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevaluestring.ProductTable, attributevaluestring.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(avs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttributeValueStringClient) Hooks() []Hook {
	return c.hooks.AttributeValueString
}

// Interceptors returns the client interceptors.
func (c *AttributeValueStringClient) Interceptors() []Interceptor {
	return c.inters.AttributeValueString
}

func (c *AttributeValueStringClient) mutate(ctx context.Context, m *AttributeValueStringMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttributeValueStringCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttributeValueStringUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttributeValueStringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttributeValueStringDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AttributeValueString mutation op: %q", m.Op())
	}
}

// AttributeVariantNumClient is a client for the AttributeVariantNum schema.
type AttributeVariantNumClient struct {
	config
}

// NewAttributeVariantNumClient returns a client for the AttributeVariantNum from the given config.
func NewAttributeVariantNumClient(c config) *AttributeVariantNumClient {
	return &AttributeVariantNumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attributevariantnum.Hooks(f(g(h())))`.
func (c *AttributeVariantNumClient) Use(hooks ...Hook) {
	c.hooks.AttributeVariantNum = append(c.hooks.AttributeVariantNum, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attributevariantnum.Intercept(f(g(h())))`.
func (c *AttributeVariantNumClient) Intercept(interceptors ...Interceptor) {
	c.inters.AttributeVariantNum = append(c.inters.AttributeVariantNum, interceptors...)
}

// Create returns a builder for creating a AttributeVariantNum entity.
func (c *AttributeVariantNumClient) Create() *AttributeVariantNumCreate {
	mutation := newAttributeVariantNumMutation(c.config, OpCreate)
	return &AttributeVariantNumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AttributeVariantNum entities.
func (c *AttributeVariantNumClient) CreateBulk(builders ...*AttributeVariantNumCreate) *AttributeVariantNumCreateBulk {
	return &AttributeVariantNumCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttributeVariantNumClient) MapCreateBulk(slice any, setFunc func(*AttributeVariantNumCreate, int)) *AttributeVariantNumCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttributeVariantNumCreateBulk{err: fmt.Errorf("calling to AttributeVariantNumClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttributeVariantNumCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttributeVariantNumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AttributeVariantNum.
func (c *AttributeVariantNumClient) Update() *AttributeVariantNumUpdate {
	mutation := newAttributeVariantNumMutation(c.config, OpUpdate)
	return &AttributeVariantNumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeVariantNumClient) UpdateOne(avn *AttributeVariantNum) *AttributeVariantNumUpdateOne {
	mutation := newAttributeVariantNumMutation(c.config, OpUpdateOne, withAttributeVariantNum(avn))
	return &AttributeVariantNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeVariantNumClient) UpdateOneID(id int) *AttributeVariantNumUpdateOne {
	mutation := newAttributeVariantNumMutation(c.config, OpUpdateOne, withAttributeVariantNumID(id))
	return &AttributeVariantNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AttributeVariantNum.
func (c *AttributeVariantNumClient) Delete() *AttributeVariantNumDelete {
	mutation := newAttributeVariantNumMutation(c.config, OpDelete)
	return &AttributeVariantNumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttributeVariantNumClient) DeleteOne(avn *AttributeVariantNum) *AttributeVariantNumDeleteOne {
	return c.DeleteOneID(avn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttributeVariantNumClient) DeleteOneID(id int) *AttributeVariantNumDeleteOne {
	builder := c.Delete().Where(attributevariantnum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeVariantNumDeleteOne{builder}
}

// Query returns a query builder for AttributeVariantNum.
func (c *AttributeVariantNumClient) Query() *AttributeVariantNumQuery {
	return &AttributeVariantNumQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttributeVariantNum},
		inters: c.Interceptors(),
	}
}

// Get returns a AttributeVariantNum entity by its id.
func (c *AttributeVariantNumClient) Get(ctx context.Context, id int) (*AttributeVariantNum, error) {
	return c.Query().Where(attributevariantnum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeVariantNumClient) GetX(ctx context.Context, id int) *AttributeVariantNum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttribute queries the attribute edge of a AttributeVariantNum.
func (c *AttributeVariantNumClient) QueryAttribute(avn *AttributeVariantNum) *AttributeQuery {
	query := (&AttributeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := avn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevariantnum.Table, attributevariantnum.FieldID, id),
			sqlgraph.To(attribute.Table, attribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevariantnum.AttributeTable, attributevariantnum.AttributeColumn),
		)
		fromV = sqlgraph.Neighbors(avn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttributeVariantNumClient) Hooks() []Hook {
	return c.hooks.AttributeVariantNum
}

// Interceptors returns the client interceptors.
func (c *AttributeVariantNumClient) Interceptors() []Interceptor {
	return c.inters.AttributeVariantNum
}

func (c *AttributeVariantNumClient) mutate(ctx context.Context, m *AttributeVariantNumMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttributeVariantNumCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttributeVariantNumUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttributeVariantNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttributeVariantNumDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AttributeVariantNum mutation op: %q", m.Op())
	}
}

// AttributeVariantStringClient is a client for the AttributeVariantString schema.
type AttributeVariantStringClient struct {
	config
}

// NewAttributeVariantStringClient returns a client for the AttributeVariantString from the given config.
func NewAttributeVariantStringClient(c config) *AttributeVariantStringClient {
	return &AttributeVariantStringClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attributevariantstring.Hooks(f(g(h())))`.
func (c *AttributeVariantStringClient) Use(hooks ...Hook) {
	c.hooks.AttributeVariantString = append(c.hooks.AttributeVariantString, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attributevariantstring.Intercept(f(g(h())))`.
func (c *AttributeVariantStringClient) Intercept(interceptors ...Interceptor) {
	c.inters.AttributeVariantString = append(c.inters.AttributeVariantString, interceptors...)
}

// Create returns a builder for creating a AttributeVariantString entity.
func (c *AttributeVariantStringClient) Create() *AttributeVariantStringCreate {
	mutation := newAttributeVariantStringMutation(c.config, OpCreate)
	return &AttributeVariantStringCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AttributeVariantString entities.
func (c *AttributeVariantStringClient) CreateBulk(builders ...*AttributeVariantStringCreate) *AttributeVariantStringCreateBulk {
	return &AttributeVariantStringCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttributeVariantStringClient) MapCreateBulk(slice any, setFunc func(*AttributeVariantStringCreate, int)) *AttributeVariantStringCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttributeVariantStringCreateBulk{err: fmt.Errorf("calling to AttributeVariantStringClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttributeVariantStringCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttributeVariantStringCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AttributeVariantString.
func (c *AttributeVariantStringClient) Update() *AttributeVariantStringUpdate {
	mutation := newAttributeVariantStringMutation(c.config, OpUpdate)
	return &AttributeVariantStringUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeVariantStringClient) UpdateOne(avs *AttributeVariantString) *AttributeVariantStringUpdateOne {
	mutation := newAttributeVariantStringMutation(c.config, OpUpdateOne, withAttributeVariantString(avs))
	return &AttributeVariantStringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeVariantStringClient) UpdateOneID(id int) *AttributeVariantStringUpdateOne {
	mutation := newAttributeVariantStringMutation(c.config, OpUpdateOne, withAttributeVariantStringID(id))
	return &AttributeVariantStringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AttributeVariantString.
func (c *AttributeVariantStringClient) Delete() *AttributeVariantStringDelete {
	mutation := newAttributeVariantStringMutation(c.config, OpDelete)
	return &AttributeVariantStringDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttributeVariantStringClient) DeleteOne(avs *AttributeVariantString) *AttributeVariantStringDeleteOne {
	return c.DeleteOneID(avs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttributeVariantStringClient) DeleteOneID(id int) *AttributeVariantStringDeleteOne {
	builder := c.Delete().Where(attributevariantstring.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeVariantStringDeleteOne{builder}
}

// Query returns a query builder for AttributeVariantString.
func (c *AttributeVariantStringClient) Query() *AttributeVariantStringQuery {
	return &AttributeVariantStringQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttributeVariantString},
		inters: c.Interceptors(),
	}
}

// Get returns a AttributeVariantString entity by its id.
func (c *AttributeVariantStringClient) Get(ctx context.Context, id int) (*AttributeVariantString, error) {
	return c.Query().Where(attributevariantstring.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeVariantStringClient) GetX(ctx context.Context, id int) *AttributeVariantString {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttribute queries the attribute edge of a AttributeVariantString.
func (c *AttributeVariantStringClient) QueryAttribute(avs *AttributeVariantString) *AttributeQuery {
	query := (&AttributeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := avs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevariantstring.Table, attributevariantstring.FieldID, id),
			sqlgraph.To(attribute.Table, attribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevariantstring.AttributeTable, attributevariantstring.AttributeColumn),
		)
		fromV = sqlgraph.Neighbors(avs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttributeVariantStringClient) Hooks() []Hook {
	return c.hooks.AttributeVariantString
}

// Interceptors returns the client interceptors.
func (c *AttributeVariantStringClient) Interceptors() []Interceptor {
	return c.inters.AttributeVariantString
}

func (c *AttributeVariantStringClient) mutate(ctx context.Context, m *AttributeVariantStringMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttributeVariantStringCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttributeVariantStringUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttributeVariantStringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttributeVariantStringDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AttributeVariantString mutation op: %q", m.Op())
	}
}

// BrandClient is a client for the Brand schema.
type BrandClient struct {
	config
}

// NewBrandClient returns a client for the Brand from the given config.
func NewBrandClient(c config) *BrandClient {
	return &BrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `brand.Hooks(f(g(h())))`.
func (c *BrandClient) Use(hooks ...Hook) {
	c.hooks.Brand = append(c.hooks.Brand, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `brand.Intercept(f(g(h())))`.
func (c *BrandClient) Intercept(interceptors ...Interceptor) {
	c.inters.Brand = append(c.inters.Brand, interceptors...)
}

// Create returns a builder for creating a Brand entity.
func (c *BrandClient) Create() *BrandCreate {
	mutation := newBrandMutation(c.config, OpCreate)
	return &BrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Brand entities.
func (c *BrandClient) CreateBulk(builders ...*BrandCreate) *BrandCreateBulk {
	return &BrandCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BrandClient) MapCreateBulk(slice any, setFunc func(*BrandCreate, int)) *BrandCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BrandCreateBulk{err: fmt.Errorf("calling to BrandClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BrandCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Brand.
func (c *BrandClient) Update() *BrandUpdate {
	mutation := newBrandMutation(c.config, OpUpdate)
	return &BrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BrandClient) UpdateOne(b *Brand) *BrandUpdateOne {
	mutation := newBrandMutation(c.config, OpUpdateOne, withBrand(b))
	return &BrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BrandClient) UpdateOneID(id int) *BrandUpdateOne {
	mutation := newBrandMutation(c.config, OpUpdateOne, withBrandID(id))
	return &BrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Brand.
func (c *BrandClient) Delete() *BrandDelete {
	mutation := newBrandMutation(c.config, OpDelete)
	return &BrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BrandClient) DeleteOne(b *Brand) *BrandDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BrandClient) DeleteOneID(id int) *BrandDeleteOne {
	builder := c.Delete().Where(brand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BrandDeleteOne{builder}
}

// Query returns a query builder for Brand.
func (c *BrandClient) Query() *BrandQuery {
	return &BrandQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBrand},
		inters: c.Interceptors(),
	}
}

// Get returns a Brand entity by its id.
func (c *BrandClient) Get(ctx context.Context, id int) (*Brand, error) {
	return c.Query().Where(brand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BrandClient) GetX(ctx context.Context, id int) *Brand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the product edge of a Brand.
func (c *BrandClient) QueryProduct(b *Brand) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(brand.Table, brand.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, brand.ProductTable, brand.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BrandClient) Hooks() []Hook {
	return c.hooks.Brand
}

// Interceptors returns the client interceptors.
func (c *BrandClient) Interceptors() []Interceptor {
	return c.inters.Brand
}

func (c *BrandClient) mutate(ctx context.Context, m *BrandMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BrandCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BrandUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BrandDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Brand mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductClient) MapCreateBulk(slice any, setFunc func(*ProductCreate, int)) *ProductCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductCreateBulk{err: fmt.Errorf("calling to ProductClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttributeValuesString queries the attributeValuesString edge of a Product.
func (c *ProductClient) QueryAttributeValuesString(pr *Product) *AttributeValueStringQuery {
	query := (&AttributeValueStringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(attributevaluestring.Table, attributevaluestring.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.AttributeValuesStringTable, product.AttributeValuesStringColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttributeValuesNum queries the attributeValuesNum edge of a Product.
func (c *ProductClient) QueryAttributeValuesNum(pr *Product) *AttributeValueNumQuery {
	query := (&AttributeValueNumClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(attributevaluenum.Table, attributevaluenum.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.AttributeValuesNumTable, product.AttributeValuesNumColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttributeValuesBool queries the attributeValuesBool edge of a Product.
func (c *ProductClient) QueryAttributeValuesBool(pr *Product) *AttributeValueBoolQuery {
	query := (&AttributeValueBoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(attributevaluebool.Table, attributevaluebool.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.AttributeValuesBoolTable, product.AttributeValuesBoolColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySettings queries the settings edge of a User.
func (c *UserClient) QuerySettings(u *User) *UserSettingsQuery {
	query := (&UserSettingsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usersettings.Table, usersettings.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.SettingsTable, user.SettingsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserSettingsClient is a client for the UserSettings schema.
type UserSettingsClient struct {
	config
}

// NewUserSettingsClient returns a client for the UserSettings from the given config.
func NewUserSettingsClient(c config) *UserSettingsClient {
	return &UserSettingsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersettings.Hooks(f(g(h())))`.
func (c *UserSettingsClient) Use(hooks ...Hook) {
	c.hooks.UserSettings = append(c.hooks.UserSettings, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersettings.Intercept(f(g(h())))`.
func (c *UserSettingsClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSettings = append(c.inters.UserSettings, interceptors...)
}

// Create returns a builder for creating a UserSettings entity.
func (c *UserSettingsClient) Create() *UserSettingsCreate {
	mutation := newUserSettingsMutation(c.config, OpCreate)
	return &UserSettingsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSettings entities.
func (c *UserSettingsClient) CreateBulk(builders ...*UserSettingsCreate) *UserSettingsCreateBulk {
	return &UserSettingsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserSettingsClient) MapCreateBulk(slice any, setFunc func(*UserSettingsCreate, int)) *UserSettingsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserSettingsCreateBulk{err: fmt.Errorf("calling to UserSettingsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserSettingsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserSettingsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSettings.
func (c *UserSettingsClient) Update() *UserSettingsUpdate {
	mutation := newUserSettingsMutation(c.config, OpUpdate)
	return &UserSettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSettingsClient) UpdateOne(us *UserSettings) *UserSettingsUpdateOne {
	mutation := newUserSettingsMutation(c.config, OpUpdateOne, withUserSettings(us))
	return &UserSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSettingsClient) UpdateOneID(id int) *UserSettingsUpdateOne {
	mutation := newUserSettingsMutation(c.config, OpUpdateOne, withUserSettingsID(id))
	return &UserSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSettings.
func (c *UserSettingsClient) Delete() *UserSettingsDelete {
	mutation := newUserSettingsMutation(c.config, OpDelete)
	return &UserSettingsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSettingsClient) DeleteOne(us *UserSettings) *UserSettingsDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSettingsClient) DeleteOneID(id int) *UserSettingsDeleteOne {
	builder := c.Delete().Where(usersettings.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSettingsDeleteOne{builder}
}

// Query returns a query builder for UserSettings.
func (c *UserSettingsClient) Query() *UserSettingsQuery {
	return &UserSettingsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSettings},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSettings entity by its id.
func (c *UserSettingsClient) Get(ctx context.Context, id int) (*UserSettings, error) {
	return c.Query().Where(usersettings.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSettingsClient) GetX(ctx context.Context, id int) *UserSettings {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserSettingsClient) Hooks() []Hook {
	return c.hooks.UserSettings
}

// Interceptors returns the client interceptors.
func (c *UserSettingsClient) Interceptors() []Interceptor {
	return c.inters.UserSettings
}

func (c *UserSettingsClient) mutate(ctx context.Context, m *UserSettingsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSettingsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSettingsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSettings mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Attribute, AttributeValueBool, AttributeValueNum, AttributeValueString,
		AttributeVariantNum, AttributeVariantString, Brand, Product, User,
		UserSettings []ent.Hook
	}
	inters struct {
		Attribute, AttributeValueBool, AttributeValueNum, AttributeValueString,
		AttributeVariantNum, AttributeVariantString, Brand, Product, User,
		UserSettings []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
