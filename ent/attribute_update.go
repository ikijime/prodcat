// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevaluebool"
	"prodcat/ent/attributevariantnum"
	"prodcat/ent/attributevariantstring"
	"prodcat/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeUpdate is the builder for updating Attribute entities.
type AttributeUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeMutation
}

// Where appends a list predicates to the AttributeUpdate builder.
func (au *AttributeUpdate) Where(ps ...predicate.Attribute) *AttributeUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AttributeUpdate) SetName(s string) *AttributeUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableName(s *string) *AttributeUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AttributeUpdate) SetDescription(s string) *AttributeUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableDescription(s *string) *AttributeUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// SetType sets the "type" field.
func (au *AttributeUpdate) SetType(s string) *AttributeUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AttributeUpdate) SetNillableType(s *string) *AttributeUpdate {
	if s != nil {
		au.SetType(*s)
	}
	return au
}

// AddAttributeValuesBoolIDs adds the "attributeValuesBool" edge to the AttributeValueBool entity by IDs.
func (au *AttributeUpdate) AddAttributeValuesBoolIDs(ids ...int) *AttributeUpdate {
	au.mutation.AddAttributeValuesBoolIDs(ids...)
	return au
}

// AddAttributeValuesBool adds the "attributeValuesBool" edges to the AttributeValueBool entity.
func (au *AttributeUpdate) AddAttributeValuesBool(a ...*AttributeValueBool) *AttributeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAttributeValuesBoolIDs(ids...)
}

// AddAttributeVariantsStringIDs adds the "attributeVariantsString" edge to the AttributeVariantString entity by IDs.
func (au *AttributeUpdate) AddAttributeVariantsStringIDs(ids ...int) *AttributeUpdate {
	au.mutation.AddAttributeVariantsStringIDs(ids...)
	return au
}

// AddAttributeVariantsString adds the "attributeVariantsString" edges to the AttributeVariantString entity.
func (au *AttributeUpdate) AddAttributeVariantsString(a ...*AttributeVariantString) *AttributeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAttributeVariantsStringIDs(ids...)
}

// AddAttributeVariantsNumIDs adds the "attributeVariantsNum" edge to the AttributeVariantNum entity by IDs.
func (au *AttributeUpdate) AddAttributeVariantsNumIDs(ids ...int) *AttributeUpdate {
	au.mutation.AddAttributeVariantsNumIDs(ids...)
	return au
}

// AddAttributeVariantsNum adds the "attributeVariantsNum" edges to the AttributeVariantNum entity.
func (au *AttributeUpdate) AddAttributeVariantsNum(a ...*AttributeVariantNum) *AttributeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAttributeVariantsNumIDs(ids...)
}

// Mutation returns the AttributeMutation object of the builder.
func (au *AttributeUpdate) Mutation() *AttributeMutation {
	return au.mutation
}

// ClearAttributeValuesBool clears all "attributeValuesBool" edges to the AttributeValueBool entity.
func (au *AttributeUpdate) ClearAttributeValuesBool() *AttributeUpdate {
	au.mutation.ClearAttributeValuesBool()
	return au
}

// RemoveAttributeValuesBoolIDs removes the "attributeValuesBool" edge to AttributeValueBool entities by IDs.
func (au *AttributeUpdate) RemoveAttributeValuesBoolIDs(ids ...int) *AttributeUpdate {
	au.mutation.RemoveAttributeValuesBoolIDs(ids...)
	return au
}

// RemoveAttributeValuesBool removes "attributeValuesBool" edges to AttributeValueBool entities.
func (au *AttributeUpdate) RemoveAttributeValuesBool(a ...*AttributeValueBool) *AttributeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAttributeValuesBoolIDs(ids...)
}

// ClearAttributeVariantsString clears all "attributeVariantsString" edges to the AttributeVariantString entity.
func (au *AttributeUpdate) ClearAttributeVariantsString() *AttributeUpdate {
	au.mutation.ClearAttributeVariantsString()
	return au
}

// RemoveAttributeVariantsStringIDs removes the "attributeVariantsString" edge to AttributeVariantString entities by IDs.
func (au *AttributeUpdate) RemoveAttributeVariantsStringIDs(ids ...int) *AttributeUpdate {
	au.mutation.RemoveAttributeVariantsStringIDs(ids...)
	return au
}

// RemoveAttributeVariantsString removes "attributeVariantsString" edges to AttributeVariantString entities.
func (au *AttributeUpdate) RemoveAttributeVariantsString(a ...*AttributeVariantString) *AttributeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAttributeVariantsStringIDs(ids...)
}

// ClearAttributeVariantsNum clears all "attributeVariantsNum" edges to the AttributeVariantNum entity.
func (au *AttributeUpdate) ClearAttributeVariantsNum() *AttributeUpdate {
	au.mutation.ClearAttributeVariantsNum()
	return au
}

// RemoveAttributeVariantsNumIDs removes the "attributeVariantsNum" edge to AttributeVariantNum entities by IDs.
func (au *AttributeUpdate) RemoveAttributeVariantsNumIDs(ids ...int) *AttributeUpdate {
	au.mutation.RemoveAttributeVariantsNumIDs(ids...)
	return au
}

// RemoveAttributeVariantsNum removes "attributeVariantsNum" edges to AttributeVariantNum entities.
func (au *AttributeUpdate) RemoveAttributeVariantsNum(a ...*AttributeVariantNum) *AttributeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAttributeVariantsNumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttributeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttributeUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttributeUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttributeUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := attribute.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Attribute.name": %w`, err)}
		}
	}
	return nil
}

func (au *AttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attribute.Table, attribute.Columns, sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(attribute.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(attribute.FieldDescription, field.TypeString, value)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(attribute.FieldType, field.TypeString, value)
	}
	if au.mutation.AttributeValuesBoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeValuesBoolTable,
			Columns: []string{attribute.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAttributeValuesBoolIDs(); len(nodes) > 0 && !au.mutation.AttributeValuesBoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeValuesBoolTable,
			Columns: []string{attribute.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AttributeValuesBoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeValuesBoolTable,
			Columns: []string{attribute.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AttributeVariantsStringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsStringTable,
			Columns: []string{attribute.AttributeVariantsStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAttributeVariantsStringIDs(); len(nodes) > 0 && !au.mutation.AttributeVariantsStringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsStringTable,
			Columns: []string{attribute.AttributeVariantsStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AttributeVariantsStringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsStringTable,
			Columns: []string{attribute.AttributeVariantsStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AttributeVariantsNumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsNumTable,
			Columns: []string{attribute.AttributeVariantsNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAttributeVariantsNumIDs(); len(nodes) > 0 && !au.mutation.AttributeVariantsNumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsNumTable,
			Columns: []string{attribute.AttributeVariantsNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AttributeVariantsNumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsNumTable,
			Columns: []string{attribute.AttributeVariantsNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AttributeUpdateOne is the builder for updating a single Attribute entity.
type AttributeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeMutation
}

// SetName sets the "name" field.
func (auo *AttributeUpdateOne) SetName(s string) *AttributeUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableName(s *string) *AttributeUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AttributeUpdateOne) SetDescription(s string) *AttributeUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableDescription(s *string) *AttributeUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// SetType sets the "type" field.
func (auo *AttributeUpdateOne) SetType(s string) *AttributeUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AttributeUpdateOne) SetNillableType(s *string) *AttributeUpdateOne {
	if s != nil {
		auo.SetType(*s)
	}
	return auo
}

// AddAttributeValuesBoolIDs adds the "attributeValuesBool" edge to the AttributeValueBool entity by IDs.
func (auo *AttributeUpdateOne) AddAttributeValuesBoolIDs(ids ...int) *AttributeUpdateOne {
	auo.mutation.AddAttributeValuesBoolIDs(ids...)
	return auo
}

// AddAttributeValuesBool adds the "attributeValuesBool" edges to the AttributeValueBool entity.
func (auo *AttributeUpdateOne) AddAttributeValuesBool(a ...*AttributeValueBool) *AttributeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAttributeValuesBoolIDs(ids...)
}

// AddAttributeVariantsStringIDs adds the "attributeVariantsString" edge to the AttributeVariantString entity by IDs.
func (auo *AttributeUpdateOne) AddAttributeVariantsStringIDs(ids ...int) *AttributeUpdateOne {
	auo.mutation.AddAttributeVariantsStringIDs(ids...)
	return auo
}

// AddAttributeVariantsString adds the "attributeVariantsString" edges to the AttributeVariantString entity.
func (auo *AttributeUpdateOne) AddAttributeVariantsString(a ...*AttributeVariantString) *AttributeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAttributeVariantsStringIDs(ids...)
}

// AddAttributeVariantsNumIDs adds the "attributeVariantsNum" edge to the AttributeVariantNum entity by IDs.
func (auo *AttributeUpdateOne) AddAttributeVariantsNumIDs(ids ...int) *AttributeUpdateOne {
	auo.mutation.AddAttributeVariantsNumIDs(ids...)
	return auo
}

// AddAttributeVariantsNum adds the "attributeVariantsNum" edges to the AttributeVariantNum entity.
func (auo *AttributeUpdateOne) AddAttributeVariantsNum(a ...*AttributeVariantNum) *AttributeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAttributeVariantsNumIDs(ids...)
}

// Mutation returns the AttributeMutation object of the builder.
func (auo *AttributeUpdateOne) Mutation() *AttributeMutation {
	return auo.mutation
}

// ClearAttributeValuesBool clears all "attributeValuesBool" edges to the AttributeValueBool entity.
func (auo *AttributeUpdateOne) ClearAttributeValuesBool() *AttributeUpdateOne {
	auo.mutation.ClearAttributeValuesBool()
	return auo
}

// RemoveAttributeValuesBoolIDs removes the "attributeValuesBool" edge to AttributeValueBool entities by IDs.
func (auo *AttributeUpdateOne) RemoveAttributeValuesBoolIDs(ids ...int) *AttributeUpdateOne {
	auo.mutation.RemoveAttributeValuesBoolIDs(ids...)
	return auo
}

// RemoveAttributeValuesBool removes "attributeValuesBool" edges to AttributeValueBool entities.
func (auo *AttributeUpdateOne) RemoveAttributeValuesBool(a ...*AttributeValueBool) *AttributeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAttributeValuesBoolIDs(ids...)
}

// ClearAttributeVariantsString clears all "attributeVariantsString" edges to the AttributeVariantString entity.
func (auo *AttributeUpdateOne) ClearAttributeVariantsString() *AttributeUpdateOne {
	auo.mutation.ClearAttributeVariantsString()
	return auo
}

// RemoveAttributeVariantsStringIDs removes the "attributeVariantsString" edge to AttributeVariantString entities by IDs.
func (auo *AttributeUpdateOne) RemoveAttributeVariantsStringIDs(ids ...int) *AttributeUpdateOne {
	auo.mutation.RemoveAttributeVariantsStringIDs(ids...)
	return auo
}

// RemoveAttributeVariantsString removes "attributeVariantsString" edges to AttributeVariantString entities.
func (auo *AttributeUpdateOne) RemoveAttributeVariantsString(a ...*AttributeVariantString) *AttributeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAttributeVariantsStringIDs(ids...)
}

// ClearAttributeVariantsNum clears all "attributeVariantsNum" edges to the AttributeVariantNum entity.
func (auo *AttributeUpdateOne) ClearAttributeVariantsNum() *AttributeUpdateOne {
	auo.mutation.ClearAttributeVariantsNum()
	return auo
}

// RemoveAttributeVariantsNumIDs removes the "attributeVariantsNum" edge to AttributeVariantNum entities by IDs.
func (auo *AttributeUpdateOne) RemoveAttributeVariantsNumIDs(ids ...int) *AttributeUpdateOne {
	auo.mutation.RemoveAttributeVariantsNumIDs(ids...)
	return auo
}

// RemoveAttributeVariantsNum removes "attributeVariantsNum" edges to AttributeVariantNum entities.
func (auo *AttributeUpdateOne) RemoveAttributeVariantsNum(a ...*AttributeVariantNum) *AttributeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAttributeVariantsNumIDs(ids...)
}

// Where appends a list predicates to the AttributeUpdate builder.
func (auo *AttributeUpdateOne) Where(ps ...predicate.Attribute) *AttributeUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttributeUpdateOne) Select(field string, fields ...string) *AttributeUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attribute entity.
func (auo *AttributeUpdateOne) Save(ctx context.Context) (*Attribute, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttributeUpdateOne) SaveX(ctx context.Context) *Attribute {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttributeUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttributeUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := attribute.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Attribute.name": %w`, err)}
		}
	}
	return nil
}

func (auo *AttributeUpdateOne) sqlSave(ctx context.Context) (_node *Attribute, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attribute.Table, attribute.Columns, sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attribute.FieldID)
		for _, f := range fields {
			if !attribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(attribute.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(attribute.FieldDescription, field.TypeString, value)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(attribute.FieldType, field.TypeString, value)
	}
	if auo.mutation.AttributeValuesBoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeValuesBoolTable,
			Columns: []string{attribute.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAttributeValuesBoolIDs(); len(nodes) > 0 && !auo.mutation.AttributeValuesBoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeValuesBoolTable,
			Columns: []string{attribute.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AttributeValuesBoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeValuesBoolTable,
			Columns: []string{attribute.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AttributeVariantsStringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsStringTable,
			Columns: []string{attribute.AttributeVariantsStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAttributeVariantsStringIDs(); len(nodes) > 0 && !auo.mutation.AttributeVariantsStringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsStringTable,
			Columns: []string{attribute.AttributeVariantsStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AttributeVariantsStringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsStringTable,
			Columns: []string{attribute.AttributeVariantsStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AttributeVariantsNumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsNumTable,
			Columns: []string{attribute.AttributeVariantsNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAttributeVariantsNumIDs(); len(nodes) > 0 && !auo.mutation.AttributeVariantsNumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsNumTable,
			Columns: []string{attribute.AttributeVariantsNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AttributeVariantsNumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attribute.AttributeVariantsNumTable,
			Columns: []string{attribute.AttributeVariantsNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Attribute{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
