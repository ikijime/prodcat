// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevaluebool"
	"prodcat/ent/product"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AttributeValueBool is the model entity for the AttributeValueBool schema.
type AttributeValueBool struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AttributeID holds the value of the "attribute_id" field.
	AttributeID int `json:"attribute_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// Value holds the value of the "value" field.
	Value bool `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttributeValueBoolQuery when eager-loading is set.
	Edges        AttributeValueBoolEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AttributeValueBoolEdges holds the relations/edges for other nodes in the graph.
type AttributeValueBoolEdges struct {
	// Attribute holds the value of the attribute edge.
	Attribute *Attribute `json:"attribute,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttributeOrErr returns the Attribute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeValueBoolEdges) AttributeOrErr() (*Attribute, error) {
	if e.loadedTypes[0] {
		if e.Attribute == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: attribute.Label}
		}
		return e.Attribute, nil
	}
	return nil, &NotLoadedError{edge: "attribute"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeValueBoolEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Product == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttributeValueBool) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attributevaluebool.FieldValue:
			values[i] = new(sql.NullBool)
		case attributevaluebool.FieldID, attributevaluebool.FieldAttributeID, attributevaluebool.FieldProductID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttributeValueBool fields.
func (avb *AttributeValueBool) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attributevaluebool.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			avb.ID = int(value.Int64)
		case attributevaluebool.FieldAttributeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_id", values[i])
			} else if value.Valid {
				avb.AttributeID = int(value.Int64)
			}
		case attributevaluebool.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				avb.ProductID = int(value.Int64)
			}
		case attributevaluebool.FieldValue:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				avb.Value = value.Bool
			}
		default:
			avb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the AttributeValueBool.
// This includes values selected through modifiers, order, etc.
func (avb *AttributeValueBool) GetValue(name string) (ent.Value, error) {
	return avb.selectValues.Get(name)
}

// QueryAttribute queries the "attribute" edge of the AttributeValueBool entity.
func (avb *AttributeValueBool) QueryAttribute() *AttributeQuery {
	return NewAttributeValueBoolClient(avb.config).QueryAttribute(avb)
}

// QueryProduct queries the "product" edge of the AttributeValueBool entity.
func (avb *AttributeValueBool) QueryProduct() *ProductQuery {
	return NewAttributeValueBoolClient(avb.config).QueryProduct(avb)
}

// Update returns a builder for updating this AttributeValueBool.
// Note that you need to call AttributeValueBool.Unwrap() before calling this method if this AttributeValueBool
// was returned from a transaction, and the transaction was committed or rolled back.
func (avb *AttributeValueBool) Update() *AttributeValueBoolUpdateOne {
	return NewAttributeValueBoolClient(avb.config).UpdateOne(avb)
}

// Unwrap unwraps the AttributeValueBool entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (avb *AttributeValueBool) Unwrap() *AttributeValueBool {
	_tx, ok := avb.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttributeValueBool is not a transactional entity")
	}
	avb.config.driver = _tx.drv
	return avb
}

// String implements the fmt.Stringer.
func (avb *AttributeValueBool) String() string {
	var builder strings.Builder
	builder.WriteString("AttributeValueBool(")
	builder.WriteString(fmt.Sprintf("id=%v, ", avb.ID))
	builder.WriteString("attribute_id=")
	builder.WriteString(fmt.Sprintf("%v", avb.AttributeID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", avb.ProductID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", avb.Value))
	builder.WriteByte(')')
	return builder.String()
}

// AttributeValueBools is a parsable slice of AttributeValueBool.
type AttributeValueBools []*AttributeValueBool
