// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevariantnum"
	"prodcat/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeVariantNumUpdate is the builder for updating AttributeVariantNum entities.
type AttributeVariantNumUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeVariantNumMutation
}

// Where appends a list predicates to the AttributeVariantNumUpdate builder.
func (avnu *AttributeVariantNumUpdate) Where(ps ...predicate.AttributeVariantNum) *AttributeVariantNumUpdate {
	avnu.mutation.Where(ps...)
	return avnu
}

// SetAttributeID sets the "attribute_id" field.
func (avnu *AttributeVariantNumUpdate) SetAttributeID(i int) *AttributeVariantNumUpdate {
	avnu.mutation.SetAttributeID(i)
	return avnu
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (avnu *AttributeVariantNumUpdate) SetNillableAttributeID(i *int) *AttributeVariantNumUpdate {
	if i != nil {
		avnu.SetAttributeID(*i)
	}
	return avnu
}

// SetValue sets the "value" field.
func (avnu *AttributeVariantNumUpdate) SetValue(i int) *AttributeVariantNumUpdate {
	avnu.mutation.ResetValue()
	avnu.mutation.SetValue(i)
	return avnu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (avnu *AttributeVariantNumUpdate) SetNillableValue(i *int) *AttributeVariantNumUpdate {
	if i != nil {
		avnu.SetValue(*i)
	}
	return avnu
}

// AddValue adds i to the "value" field.
func (avnu *AttributeVariantNumUpdate) AddValue(i int) *AttributeVariantNumUpdate {
	avnu.mutation.AddValue(i)
	return avnu
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (avnu *AttributeVariantNumUpdate) SetAttribute(a *Attribute) *AttributeVariantNumUpdate {
	return avnu.SetAttributeID(a.ID)
}

// Mutation returns the AttributeVariantNumMutation object of the builder.
func (avnu *AttributeVariantNumUpdate) Mutation() *AttributeVariantNumMutation {
	return avnu.mutation
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (avnu *AttributeVariantNumUpdate) ClearAttribute() *AttributeVariantNumUpdate {
	avnu.mutation.ClearAttribute()
	return avnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (avnu *AttributeVariantNumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, avnu.sqlSave, avnu.mutation, avnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avnu *AttributeVariantNumUpdate) SaveX(ctx context.Context) int {
	affected, err := avnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (avnu *AttributeVariantNumUpdate) Exec(ctx context.Context) error {
	_, err := avnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avnu *AttributeVariantNumUpdate) ExecX(ctx context.Context) {
	if err := avnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avnu *AttributeVariantNumUpdate) check() error {
	if _, ok := avnu.mutation.AttributeID(); avnu.mutation.AttributeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeVariantNum.attribute"`)
	}
	return nil
}

func (avnu *AttributeVariantNumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := avnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributevariantnum.Table, attributevariantnum.Columns, sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt))
	if ps := avnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avnu.mutation.Value(); ok {
		_spec.SetField(attributevariantnum.FieldValue, field.TypeInt, value)
	}
	if value, ok := avnu.mutation.AddedValue(); ok {
		_spec.AddField(attributevariantnum.FieldValue, field.TypeInt, value)
	}
	if avnu.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevariantnum.AttributeTable,
			Columns: []string{attributevariantnum.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avnu.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevariantnum.AttributeTable,
			Columns: []string{attributevariantnum.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, avnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributevariantnum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	avnu.mutation.done = true
	return n, nil
}

// AttributeVariantNumUpdateOne is the builder for updating a single AttributeVariantNum entity.
type AttributeVariantNumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeVariantNumMutation
}

// SetAttributeID sets the "attribute_id" field.
func (avnuo *AttributeVariantNumUpdateOne) SetAttributeID(i int) *AttributeVariantNumUpdateOne {
	avnuo.mutation.SetAttributeID(i)
	return avnuo
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (avnuo *AttributeVariantNumUpdateOne) SetNillableAttributeID(i *int) *AttributeVariantNumUpdateOne {
	if i != nil {
		avnuo.SetAttributeID(*i)
	}
	return avnuo
}

// SetValue sets the "value" field.
func (avnuo *AttributeVariantNumUpdateOne) SetValue(i int) *AttributeVariantNumUpdateOne {
	avnuo.mutation.ResetValue()
	avnuo.mutation.SetValue(i)
	return avnuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (avnuo *AttributeVariantNumUpdateOne) SetNillableValue(i *int) *AttributeVariantNumUpdateOne {
	if i != nil {
		avnuo.SetValue(*i)
	}
	return avnuo
}

// AddValue adds i to the "value" field.
func (avnuo *AttributeVariantNumUpdateOne) AddValue(i int) *AttributeVariantNumUpdateOne {
	avnuo.mutation.AddValue(i)
	return avnuo
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (avnuo *AttributeVariantNumUpdateOne) SetAttribute(a *Attribute) *AttributeVariantNumUpdateOne {
	return avnuo.SetAttributeID(a.ID)
}

// Mutation returns the AttributeVariantNumMutation object of the builder.
func (avnuo *AttributeVariantNumUpdateOne) Mutation() *AttributeVariantNumMutation {
	return avnuo.mutation
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (avnuo *AttributeVariantNumUpdateOne) ClearAttribute() *AttributeVariantNumUpdateOne {
	avnuo.mutation.ClearAttribute()
	return avnuo
}

// Where appends a list predicates to the AttributeVariantNumUpdate builder.
func (avnuo *AttributeVariantNumUpdateOne) Where(ps ...predicate.AttributeVariantNum) *AttributeVariantNumUpdateOne {
	avnuo.mutation.Where(ps...)
	return avnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (avnuo *AttributeVariantNumUpdateOne) Select(field string, fields ...string) *AttributeVariantNumUpdateOne {
	avnuo.fields = append([]string{field}, fields...)
	return avnuo
}

// Save executes the query and returns the updated AttributeVariantNum entity.
func (avnuo *AttributeVariantNumUpdateOne) Save(ctx context.Context) (*AttributeVariantNum, error) {
	return withHooks(ctx, avnuo.sqlSave, avnuo.mutation, avnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avnuo *AttributeVariantNumUpdateOne) SaveX(ctx context.Context) *AttributeVariantNum {
	node, err := avnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (avnuo *AttributeVariantNumUpdateOne) Exec(ctx context.Context) error {
	_, err := avnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avnuo *AttributeVariantNumUpdateOne) ExecX(ctx context.Context) {
	if err := avnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avnuo *AttributeVariantNumUpdateOne) check() error {
	if _, ok := avnuo.mutation.AttributeID(); avnuo.mutation.AttributeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeVariantNum.attribute"`)
	}
	return nil
}

func (avnuo *AttributeVariantNumUpdateOne) sqlSave(ctx context.Context) (_node *AttributeVariantNum, err error) {
	if err := avnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributevariantnum.Table, attributevariantnum.Columns, sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt))
	id, ok := avnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeVariantNum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := avnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributevariantnum.FieldID)
		for _, f := range fields {
			if !attributevariantnum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributevariantnum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := avnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avnuo.mutation.Value(); ok {
		_spec.SetField(attributevariantnum.FieldValue, field.TypeInt, value)
	}
	if value, ok := avnuo.mutation.AddedValue(); ok {
		_spec.AddField(attributevariantnum.FieldValue, field.TypeInt, value)
	}
	if avnuo.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevariantnum.AttributeTable,
			Columns: []string{attributevariantnum.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avnuo.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevariantnum.AttributeTable,
			Columns: []string{attributevariantnum.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttributeVariantNum{config: avnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, avnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributevariantnum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	avnuo.mutation.done = true
	return _node, nil
}
