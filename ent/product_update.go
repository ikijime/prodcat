// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prodcat/ent/attributevaluebool"
	"prodcat/ent/attributevaluenum"
	"prodcat/ent/attributevaluestring"
	"prodcat/ent/predicate"
	"prodcat/ent/product"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCode sets the "code" field.
func (pu *ProductUpdate) SetCode(i int) *ProductUpdate {
	pu.mutation.ResetCode()
	pu.mutation.SetCode(i)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCode(i *int) *ProductUpdate {
	if i != nil {
		pu.SetCode(*i)
	}
	return pu
}

// AddCode adds i to the "code" field.
func (pu *ProductUpdate) AddCode(i int) *ProductUpdate {
	pu.mutation.AddCode(i)
	return pu
}

// SetBarcode sets the "barcode" field.
func (pu *ProductUpdate) SetBarcode(s string) *ProductUpdate {
	pu.mutation.SetBarcode(s)
	return pu
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableBarcode(s *string) *ProductUpdate {
	if s != nil {
		pu.SetBarcode(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDescription(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProductUpdate) ClearDescription() *ProductUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProductUpdate) SetCreatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableUpdatedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// AddAttributeValuesStringIDs adds the "attributeValuesString" edge to the AttributeValueString entity by IDs.
func (pu *ProductUpdate) AddAttributeValuesStringIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddAttributeValuesStringIDs(ids...)
	return pu
}

// AddAttributeValuesString adds the "attributeValuesString" edges to the AttributeValueString entity.
func (pu *ProductUpdate) AddAttributeValuesString(a ...*AttributeValueString) *ProductUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAttributeValuesStringIDs(ids...)
}

// AddAttributeValuesNumIDs adds the "attributeValuesNum" edge to the AttributeValueNum entity by IDs.
func (pu *ProductUpdate) AddAttributeValuesNumIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddAttributeValuesNumIDs(ids...)
	return pu
}

// AddAttributeValuesNum adds the "attributeValuesNum" edges to the AttributeValueNum entity.
func (pu *ProductUpdate) AddAttributeValuesNum(a ...*AttributeValueNum) *ProductUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAttributeValuesNumIDs(ids...)
}

// AddAttributeValuesBoolIDs adds the "attributeValuesBool" edge to the AttributeValueBool entity by IDs.
func (pu *ProductUpdate) AddAttributeValuesBoolIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddAttributeValuesBoolIDs(ids...)
	return pu
}

// AddAttributeValuesBool adds the "attributeValuesBool" edges to the AttributeValueBool entity.
func (pu *ProductUpdate) AddAttributeValuesBool(a ...*AttributeValueBool) *ProductUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAttributeValuesBoolIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearAttributeValuesString clears all "attributeValuesString" edges to the AttributeValueString entity.
func (pu *ProductUpdate) ClearAttributeValuesString() *ProductUpdate {
	pu.mutation.ClearAttributeValuesString()
	return pu
}

// RemoveAttributeValuesStringIDs removes the "attributeValuesString" edge to AttributeValueString entities by IDs.
func (pu *ProductUpdate) RemoveAttributeValuesStringIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveAttributeValuesStringIDs(ids...)
	return pu
}

// RemoveAttributeValuesString removes "attributeValuesString" edges to AttributeValueString entities.
func (pu *ProductUpdate) RemoveAttributeValuesString(a ...*AttributeValueString) *ProductUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAttributeValuesStringIDs(ids...)
}

// ClearAttributeValuesNum clears all "attributeValuesNum" edges to the AttributeValueNum entity.
func (pu *ProductUpdate) ClearAttributeValuesNum() *ProductUpdate {
	pu.mutation.ClearAttributeValuesNum()
	return pu
}

// RemoveAttributeValuesNumIDs removes the "attributeValuesNum" edge to AttributeValueNum entities by IDs.
func (pu *ProductUpdate) RemoveAttributeValuesNumIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveAttributeValuesNumIDs(ids...)
	return pu
}

// RemoveAttributeValuesNum removes "attributeValuesNum" edges to AttributeValueNum entities.
func (pu *ProductUpdate) RemoveAttributeValuesNum(a ...*AttributeValueNum) *ProductUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAttributeValuesNumIDs(ids...)
}

// ClearAttributeValuesBool clears all "attributeValuesBool" edges to the AttributeValueBool entity.
func (pu *ProductUpdate) ClearAttributeValuesBool() *ProductUpdate {
	pu.mutation.ClearAttributeValuesBool()
	return pu
}

// RemoveAttributeValuesBoolIDs removes the "attributeValuesBool" edge to AttributeValueBool entities by IDs.
func (pu *ProductUpdate) RemoveAttributeValuesBoolIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveAttributeValuesBoolIDs(ids...)
	return pu
}

// RemoveAttributeValuesBool removes "attributeValuesBool" edges to AttributeValueBool entities.
func (pu *ProductUpdate) RemoveAttributeValuesBool(a ...*AttributeValueBool) *ProductUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAttributeValuesBoolIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(product.FieldCode, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedCode(); ok {
		_spec.AddField(product.FieldCode, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Barcode(); ok {
		_spec.SetField(product.FieldBarcode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(product.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.AttributeValuesStringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesStringTable,
			Columns: []string{product.AttributeValuesStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluestring.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAttributeValuesStringIDs(); len(nodes) > 0 && !pu.mutation.AttributeValuesStringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesStringTable,
			Columns: []string{product.AttributeValuesStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluestring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AttributeValuesStringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesStringTable,
			Columns: []string{product.AttributeValuesStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluestring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AttributeValuesNumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesNumTable,
			Columns: []string{product.AttributeValuesNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluenum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAttributeValuesNumIDs(); len(nodes) > 0 && !pu.mutation.AttributeValuesNumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesNumTable,
			Columns: []string{product.AttributeValuesNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluenum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AttributeValuesNumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesNumTable,
			Columns: []string{product.AttributeValuesNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluenum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AttributeValuesBoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesBoolTable,
			Columns: []string{product.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAttributeValuesBoolIDs(); len(nodes) > 0 && !pu.mutation.AttributeValuesBoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesBoolTable,
			Columns: []string{product.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AttributeValuesBoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesBoolTable,
			Columns: []string{product.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetCode sets the "code" field.
func (puo *ProductUpdateOne) SetCode(i int) *ProductUpdateOne {
	puo.mutation.ResetCode()
	puo.mutation.SetCode(i)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCode(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetCode(*i)
	}
	return puo
}

// AddCode adds i to the "code" field.
func (puo *ProductUpdateOne) AddCode(i int) *ProductUpdateOne {
	puo.mutation.AddCode(i)
	return puo
}

// SetBarcode sets the "barcode" field.
func (puo *ProductUpdateOne) SetBarcode(s string) *ProductUpdateOne {
	puo.mutation.SetBarcode(s)
	return puo
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableBarcode(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetBarcode(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDescription(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProductUpdateOne) ClearDescription() *ProductUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProductUpdateOne) SetCreatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// AddAttributeValuesStringIDs adds the "attributeValuesString" edge to the AttributeValueString entity by IDs.
func (puo *ProductUpdateOne) AddAttributeValuesStringIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddAttributeValuesStringIDs(ids...)
	return puo
}

// AddAttributeValuesString adds the "attributeValuesString" edges to the AttributeValueString entity.
func (puo *ProductUpdateOne) AddAttributeValuesString(a ...*AttributeValueString) *ProductUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAttributeValuesStringIDs(ids...)
}

// AddAttributeValuesNumIDs adds the "attributeValuesNum" edge to the AttributeValueNum entity by IDs.
func (puo *ProductUpdateOne) AddAttributeValuesNumIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddAttributeValuesNumIDs(ids...)
	return puo
}

// AddAttributeValuesNum adds the "attributeValuesNum" edges to the AttributeValueNum entity.
func (puo *ProductUpdateOne) AddAttributeValuesNum(a ...*AttributeValueNum) *ProductUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAttributeValuesNumIDs(ids...)
}

// AddAttributeValuesBoolIDs adds the "attributeValuesBool" edge to the AttributeValueBool entity by IDs.
func (puo *ProductUpdateOne) AddAttributeValuesBoolIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddAttributeValuesBoolIDs(ids...)
	return puo
}

// AddAttributeValuesBool adds the "attributeValuesBool" edges to the AttributeValueBool entity.
func (puo *ProductUpdateOne) AddAttributeValuesBool(a ...*AttributeValueBool) *ProductUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAttributeValuesBoolIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearAttributeValuesString clears all "attributeValuesString" edges to the AttributeValueString entity.
func (puo *ProductUpdateOne) ClearAttributeValuesString() *ProductUpdateOne {
	puo.mutation.ClearAttributeValuesString()
	return puo
}

// RemoveAttributeValuesStringIDs removes the "attributeValuesString" edge to AttributeValueString entities by IDs.
func (puo *ProductUpdateOne) RemoveAttributeValuesStringIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveAttributeValuesStringIDs(ids...)
	return puo
}

// RemoveAttributeValuesString removes "attributeValuesString" edges to AttributeValueString entities.
func (puo *ProductUpdateOne) RemoveAttributeValuesString(a ...*AttributeValueString) *ProductUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAttributeValuesStringIDs(ids...)
}

// ClearAttributeValuesNum clears all "attributeValuesNum" edges to the AttributeValueNum entity.
func (puo *ProductUpdateOne) ClearAttributeValuesNum() *ProductUpdateOne {
	puo.mutation.ClearAttributeValuesNum()
	return puo
}

// RemoveAttributeValuesNumIDs removes the "attributeValuesNum" edge to AttributeValueNum entities by IDs.
func (puo *ProductUpdateOne) RemoveAttributeValuesNumIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveAttributeValuesNumIDs(ids...)
	return puo
}

// RemoveAttributeValuesNum removes "attributeValuesNum" edges to AttributeValueNum entities.
func (puo *ProductUpdateOne) RemoveAttributeValuesNum(a ...*AttributeValueNum) *ProductUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAttributeValuesNumIDs(ids...)
}

// ClearAttributeValuesBool clears all "attributeValuesBool" edges to the AttributeValueBool entity.
func (puo *ProductUpdateOne) ClearAttributeValuesBool() *ProductUpdateOne {
	puo.mutation.ClearAttributeValuesBool()
	return puo
}

// RemoveAttributeValuesBoolIDs removes the "attributeValuesBool" edge to AttributeValueBool entities by IDs.
func (puo *ProductUpdateOne) RemoveAttributeValuesBoolIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveAttributeValuesBoolIDs(ids...)
	return puo
}

// RemoveAttributeValuesBool removes "attributeValuesBool" edges to AttributeValueBool entities.
func (puo *ProductUpdateOne) RemoveAttributeValuesBool(a ...*AttributeValueBool) *ProductUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAttributeValuesBoolIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(product.FieldCode, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedCode(); ok {
		_spec.AddField(product.FieldCode, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Barcode(); ok {
		_spec.SetField(product.FieldBarcode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(product.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.AttributeValuesStringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesStringTable,
			Columns: []string{product.AttributeValuesStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluestring.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAttributeValuesStringIDs(); len(nodes) > 0 && !puo.mutation.AttributeValuesStringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesStringTable,
			Columns: []string{product.AttributeValuesStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluestring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AttributeValuesStringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesStringTable,
			Columns: []string{product.AttributeValuesStringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluestring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AttributeValuesNumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesNumTable,
			Columns: []string{product.AttributeValuesNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluenum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAttributeValuesNumIDs(); len(nodes) > 0 && !puo.mutation.AttributeValuesNumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesNumTable,
			Columns: []string{product.AttributeValuesNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluenum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AttributeValuesNumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesNumTable,
			Columns: []string{product.AttributeValuesNumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluenum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AttributeValuesBoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesBoolTable,
			Columns: []string{product.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAttributeValuesBoolIDs(); len(nodes) > 0 && !puo.mutation.AttributeValuesBoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesBoolTable,
			Columns: []string{product.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AttributeValuesBoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AttributeValuesBoolTable,
			Columns: []string{product.AttributeValuesBoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
