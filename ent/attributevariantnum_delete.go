// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"prodcat/ent/attributevariantnum"
	"prodcat/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeVariantNumDelete is the builder for deleting a AttributeVariantNum entity.
type AttributeVariantNumDelete struct {
	config
	hooks    []Hook
	mutation *AttributeVariantNumMutation
}

// Where appends a list predicates to the AttributeVariantNumDelete builder.
func (avnd *AttributeVariantNumDelete) Where(ps ...predicate.AttributeVariantNum) *AttributeVariantNumDelete {
	avnd.mutation.Where(ps...)
	return avnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (avnd *AttributeVariantNumDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, avnd.sqlExec, avnd.mutation, avnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (avnd *AttributeVariantNumDelete) ExecX(ctx context.Context) int {
	n, err := avnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (avnd *AttributeVariantNumDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(attributevariantnum.Table, sqlgraph.NewFieldSpec(attributevariantnum.FieldID, field.TypeInt))
	if ps := avnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, avnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	avnd.mutation.done = true
	return affected, err
}

// AttributeVariantNumDeleteOne is the builder for deleting a single AttributeVariantNum entity.
type AttributeVariantNumDeleteOne struct {
	avnd *AttributeVariantNumDelete
}

// Where appends a list predicates to the AttributeVariantNumDelete builder.
func (avndo *AttributeVariantNumDeleteOne) Where(ps ...predicate.AttributeVariantNum) *AttributeVariantNumDeleteOne {
	avndo.avnd.mutation.Where(ps...)
	return avndo
}

// Exec executes the deletion query.
func (avndo *AttributeVariantNumDeleteOne) Exec(ctx context.Context) error {
	n, err := avndo.avnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{attributevariantnum.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (avndo *AttributeVariantNumDeleteOne) ExecX(ctx context.Context) {
	if err := avndo.Exec(ctx); err != nil {
		panic(err)
	}
}
