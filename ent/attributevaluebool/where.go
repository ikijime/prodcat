// Code generated by ent, DO NOT EDIT.

package attributevaluebool

import (
	"prodcat/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldLTE(FieldID, id))
}

// AttributeID applies equality check predicate on the "attribute_id" field. It's identical to AttributeIDEQ.
func AttributeID(v int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldEQ(FieldAttributeID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldEQ(FieldProductID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v bool) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldEQ(FieldValue, v))
}

// AttributeIDEQ applies the EQ predicate on the "attribute_id" field.
func AttributeIDEQ(v int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldEQ(FieldAttributeID, v))
}

// AttributeIDNEQ applies the NEQ predicate on the "attribute_id" field.
func AttributeIDNEQ(v int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldNEQ(FieldAttributeID, v))
}

// AttributeIDIn applies the In predicate on the "attribute_id" field.
func AttributeIDIn(vs ...int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldIn(FieldAttributeID, vs...))
}

// AttributeIDNotIn applies the NotIn predicate on the "attribute_id" field.
func AttributeIDNotIn(vs ...int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldNotIn(FieldAttributeID, vs...))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldNotIn(FieldProductID, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v bool) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v bool) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.FieldNEQ(FieldValue, v))
}

// HasAttribute applies the HasEdge predicate on the "attribute" edge.
func HasAttribute() predicate.AttributeValueBool {
	return predicate.AttributeValueBool(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttributeTable, AttributeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttributeWith applies the HasEdge predicate on the "attribute" edge with a given conditions (other predicates).
func HasAttributeWith(preds ...predicate.Attribute) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(func(s *sql.Selector) {
		step := newAttributeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.AttributeValueBool {
	return predicate.AttributeValueBool(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AttributeValueBool) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AttributeValueBool) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AttributeValueBool) predicate.AttributeValueBool {
	return predicate.AttributeValueBool(sql.NotPredicates(p))
}
