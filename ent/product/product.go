// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldBarcode holds the string denoting the barcode field in the database.
	FieldBarcode = "barcode"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAttributeValuesString holds the string denoting the attributevaluesstring edge name in mutations.
	EdgeAttributeValuesString = "attributeValuesString"
	// EdgeAttributeValuesNum holds the string denoting the attributevaluesnum edge name in mutations.
	EdgeAttributeValuesNum = "attributeValuesNum"
	// EdgeAttributeValuesBool holds the string denoting the attributevaluesbool edge name in mutations.
	EdgeAttributeValuesBool = "attributeValuesBool"
	// Table holds the table name of the product in the database.
	Table = "products"
	// AttributeValuesStringTable is the table that holds the attributeValuesString relation/edge.
	AttributeValuesStringTable = "attribute_value_strings"
	// AttributeValuesStringInverseTable is the table name for the AttributeValueString entity.
	// It exists in this package in order to avoid circular dependency with the "attributevaluestring" package.
	AttributeValuesStringInverseTable = "attribute_value_strings"
	// AttributeValuesStringColumn is the table column denoting the attributeValuesString relation/edge.
	AttributeValuesStringColumn = "product_id"
	// AttributeValuesNumTable is the table that holds the attributeValuesNum relation/edge.
	AttributeValuesNumTable = "attribute_value_nums"
	// AttributeValuesNumInverseTable is the table name for the AttributeValueNum entity.
	// It exists in this package in order to avoid circular dependency with the "attributevaluenum" package.
	AttributeValuesNumInverseTable = "attribute_value_nums"
	// AttributeValuesNumColumn is the table column denoting the attributeValuesNum relation/edge.
	AttributeValuesNumColumn = "product_id"
	// AttributeValuesBoolTable is the table that holds the attributeValuesBool relation/edge.
	AttributeValuesBoolTable = "attribute_value_bools"
	// AttributeValuesBoolInverseTable is the table name for the AttributeValueBool entity.
	// It exists in this package in order to avoid circular dependency with the "attributevaluebool" package.
	AttributeValuesBoolInverseTable = "attribute_value_bools"
	// AttributeValuesBoolColumn is the table column denoting the attributeValuesBool relation/edge.
	AttributeValuesBoolColumn = "product_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldBarcode,
	FieldName,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"brand_product",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByBarcode orders the results by the barcode field.
func ByBarcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBarcode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAttributeValuesStringCount orders the results by attributeValuesString count.
func ByAttributeValuesStringCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttributeValuesStringStep(), opts...)
	}
}

// ByAttributeValuesString orders the results by attributeValuesString terms.
func ByAttributeValuesString(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttributeValuesStringStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAttributeValuesNumCount orders the results by attributeValuesNum count.
func ByAttributeValuesNumCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttributeValuesNumStep(), opts...)
	}
}

// ByAttributeValuesNum orders the results by attributeValuesNum terms.
func ByAttributeValuesNum(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttributeValuesNumStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAttributeValuesBoolCount orders the results by attributeValuesBool count.
func ByAttributeValuesBoolCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttributeValuesBoolStep(), opts...)
	}
}

// ByAttributeValuesBool orders the results by attributeValuesBool terms.
func ByAttributeValuesBool(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttributeValuesBoolStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAttributeValuesStringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttributeValuesStringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttributeValuesStringTable, AttributeValuesStringColumn),
	)
}
func newAttributeValuesNumStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttributeValuesNumInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttributeValuesNumTable, AttributeValuesNumColumn),
	)
}
func newAttributeValuesBoolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttributeValuesBoolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttributeValuesBoolTable, AttributeValuesBoolColumn),
	)
}
