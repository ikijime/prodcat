// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prodcat/ent/attributevaluestring"
	"prodcat/ent/attributevariantstring"
	"prodcat/ent/predicate"
	"prodcat/ent/product"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeValueStringUpdate is the builder for updating AttributeValueString entities.
type AttributeValueStringUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeValueStringMutation
}

// Where appends a list predicates to the AttributeValueStringUpdate builder.
func (avsu *AttributeValueStringUpdate) Where(ps ...predicate.AttributeValueString) *AttributeValueStringUpdate {
	avsu.mutation.Where(ps...)
	return avsu
}

// SetVariantID sets the "variant_id" field.
func (avsu *AttributeValueStringUpdate) SetVariantID(i int) *AttributeValueStringUpdate {
	avsu.mutation.SetVariantID(i)
	return avsu
}

// SetNillableVariantID sets the "variant_id" field if the given value is not nil.
func (avsu *AttributeValueStringUpdate) SetNillableVariantID(i *int) *AttributeValueStringUpdate {
	if i != nil {
		avsu.SetVariantID(*i)
	}
	return avsu
}

// SetProductID sets the "product_id" field.
func (avsu *AttributeValueStringUpdate) SetProductID(i int) *AttributeValueStringUpdate {
	avsu.mutation.SetProductID(i)
	return avsu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (avsu *AttributeValueStringUpdate) SetNillableProductID(i *int) *AttributeValueStringUpdate {
	if i != nil {
		avsu.SetProductID(*i)
	}
	return avsu
}

// SetVariant sets the "variant" edge to the AttributeVariantString entity.
func (avsu *AttributeValueStringUpdate) SetVariant(a *AttributeVariantString) *AttributeValueStringUpdate {
	return avsu.SetVariantID(a.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (avsu *AttributeValueStringUpdate) SetProduct(p *Product) *AttributeValueStringUpdate {
	return avsu.SetProductID(p.ID)
}

// Mutation returns the AttributeValueStringMutation object of the builder.
func (avsu *AttributeValueStringUpdate) Mutation() *AttributeValueStringMutation {
	return avsu.mutation
}

// ClearVariant clears the "variant" edge to the AttributeVariantString entity.
func (avsu *AttributeValueStringUpdate) ClearVariant() *AttributeValueStringUpdate {
	avsu.mutation.ClearVariant()
	return avsu
}

// ClearProduct clears the "product" edge to the Product entity.
func (avsu *AttributeValueStringUpdate) ClearProduct() *AttributeValueStringUpdate {
	avsu.mutation.ClearProduct()
	return avsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (avsu *AttributeValueStringUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, avsu.sqlSave, avsu.mutation, avsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avsu *AttributeValueStringUpdate) SaveX(ctx context.Context) int {
	affected, err := avsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (avsu *AttributeValueStringUpdate) Exec(ctx context.Context) error {
	_, err := avsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avsu *AttributeValueStringUpdate) ExecX(ctx context.Context) {
	if err := avsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avsu *AttributeValueStringUpdate) check() error {
	if _, ok := avsu.mutation.VariantID(); avsu.mutation.VariantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueString.variant"`)
	}
	if _, ok := avsu.mutation.ProductID(); avsu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueString.product"`)
	}
	return nil
}

func (avsu *AttributeValueStringUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := avsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributevaluestring.Table, attributevaluestring.Columns, sqlgraph.NewFieldSpec(attributevaluestring.FieldID, field.TypeInt))
	if ps := avsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if avsu.mutation.VariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributevaluestring.VariantTable,
			Columns: []string{attributevaluestring.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avsu.mutation.VariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributevaluestring.VariantTable,
			Columns: []string{attributevaluestring.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avsu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluestring.ProductTable,
			Columns: []string{attributevaluestring.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avsu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluestring.ProductTable,
			Columns: []string{attributevaluestring.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, avsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributevaluestring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	avsu.mutation.done = true
	return n, nil
}

// AttributeValueStringUpdateOne is the builder for updating a single AttributeValueString entity.
type AttributeValueStringUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeValueStringMutation
}

// SetVariantID sets the "variant_id" field.
func (avsuo *AttributeValueStringUpdateOne) SetVariantID(i int) *AttributeValueStringUpdateOne {
	avsuo.mutation.SetVariantID(i)
	return avsuo
}

// SetNillableVariantID sets the "variant_id" field if the given value is not nil.
func (avsuo *AttributeValueStringUpdateOne) SetNillableVariantID(i *int) *AttributeValueStringUpdateOne {
	if i != nil {
		avsuo.SetVariantID(*i)
	}
	return avsuo
}

// SetProductID sets the "product_id" field.
func (avsuo *AttributeValueStringUpdateOne) SetProductID(i int) *AttributeValueStringUpdateOne {
	avsuo.mutation.SetProductID(i)
	return avsuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (avsuo *AttributeValueStringUpdateOne) SetNillableProductID(i *int) *AttributeValueStringUpdateOne {
	if i != nil {
		avsuo.SetProductID(*i)
	}
	return avsuo
}

// SetVariant sets the "variant" edge to the AttributeVariantString entity.
func (avsuo *AttributeValueStringUpdateOne) SetVariant(a *AttributeVariantString) *AttributeValueStringUpdateOne {
	return avsuo.SetVariantID(a.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (avsuo *AttributeValueStringUpdateOne) SetProduct(p *Product) *AttributeValueStringUpdateOne {
	return avsuo.SetProductID(p.ID)
}

// Mutation returns the AttributeValueStringMutation object of the builder.
func (avsuo *AttributeValueStringUpdateOne) Mutation() *AttributeValueStringMutation {
	return avsuo.mutation
}

// ClearVariant clears the "variant" edge to the AttributeVariantString entity.
func (avsuo *AttributeValueStringUpdateOne) ClearVariant() *AttributeValueStringUpdateOne {
	avsuo.mutation.ClearVariant()
	return avsuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (avsuo *AttributeValueStringUpdateOne) ClearProduct() *AttributeValueStringUpdateOne {
	avsuo.mutation.ClearProduct()
	return avsuo
}

// Where appends a list predicates to the AttributeValueStringUpdate builder.
func (avsuo *AttributeValueStringUpdateOne) Where(ps ...predicate.AttributeValueString) *AttributeValueStringUpdateOne {
	avsuo.mutation.Where(ps...)
	return avsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (avsuo *AttributeValueStringUpdateOne) Select(field string, fields ...string) *AttributeValueStringUpdateOne {
	avsuo.fields = append([]string{field}, fields...)
	return avsuo
}

// Save executes the query and returns the updated AttributeValueString entity.
func (avsuo *AttributeValueStringUpdateOne) Save(ctx context.Context) (*AttributeValueString, error) {
	return withHooks(ctx, avsuo.sqlSave, avsuo.mutation, avsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avsuo *AttributeValueStringUpdateOne) SaveX(ctx context.Context) *AttributeValueString {
	node, err := avsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (avsuo *AttributeValueStringUpdateOne) Exec(ctx context.Context) error {
	_, err := avsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avsuo *AttributeValueStringUpdateOne) ExecX(ctx context.Context) {
	if err := avsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avsuo *AttributeValueStringUpdateOne) check() error {
	if _, ok := avsuo.mutation.VariantID(); avsuo.mutation.VariantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueString.variant"`)
	}
	if _, ok := avsuo.mutation.ProductID(); avsuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueString.product"`)
	}
	return nil
}

func (avsuo *AttributeValueStringUpdateOne) sqlSave(ctx context.Context) (_node *AttributeValueString, err error) {
	if err := avsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributevaluestring.Table, attributevaluestring.Columns, sqlgraph.NewFieldSpec(attributevaluestring.FieldID, field.TypeInt))
	id, ok := avsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeValueString.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := avsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributevaluestring.FieldID)
		for _, f := range fields {
			if !attributevaluestring.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributevaluestring.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := avsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if avsuo.mutation.VariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributevaluestring.VariantTable,
			Columns: []string{attributevaluestring.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avsuo.mutation.VariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributevaluestring.VariantTable,
			Columns: []string{attributevaluestring.VariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributevariantstring.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avsuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluestring.ProductTable,
			Columns: []string{attributevaluestring.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avsuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluestring.ProductTable,
			Columns: []string{attributevaluestring.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttributeValueString{config: avsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, avsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributevaluestring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	avsuo.mutation.done = true
	return _node, nil
}
