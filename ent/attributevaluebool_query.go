// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevaluebool"
	"prodcat/ent/predicate"
	"prodcat/ent/product"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeValueBoolQuery is the builder for querying AttributeValueBool entities.
type AttributeValueBoolQuery struct {
	config
	ctx           *QueryContext
	order         []attributevaluebool.OrderOption
	inters        []Interceptor
	predicates    []predicate.AttributeValueBool
	withAttribute *AttributeQuery
	withProduct   *ProductQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AttributeValueBoolQuery builder.
func (avbq *AttributeValueBoolQuery) Where(ps ...predicate.AttributeValueBool) *AttributeValueBoolQuery {
	avbq.predicates = append(avbq.predicates, ps...)
	return avbq
}

// Limit the number of records to be returned by this query.
func (avbq *AttributeValueBoolQuery) Limit(limit int) *AttributeValueBoolQuery {
	avbq.ctx.Limit = &limit
	return avbq
}

// Offset to start from.
func (avbq *AttributeValueBoolQuery) Offset(offset int) *AttributeValueBoolQuery {
	avbq.ctx.Offset = &offset
	return avbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (avbq *AttributeValueBoolQuery) Unique(unique bool) *AttributeValueBoolQuery {
	avbq.ctx.Unique = &unique
	return avbq
}

// Order specifies how the records should be ordered.
func (avbq *AttributeValueBoolQuery) Order(o ...attributevaluebool.OrderOption) *AttributeValueBoolQuery {
	avbq.order = append(avbq.order, o...)
	return avbq
}

// QueryAttribute chains the current query on the "attribute" edge.
func (avbq *AttributeValueBoolQuery) QueryAttribute() *AttributeQuery {
	query := (&AttributeClient{config: avbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := avbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := avbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevaluebool.Table, attributevaluebool.FieldID, selector),
			sqlgraph.To(attribute.Table, attribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevaluebool.AttributeTable, attributevaluebool.AttributeColumn),
		)
		fromU = sqlgraph.SetNeighbors(avbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProduct chains the current query on the "product" edge.
func (avbq *AttributeValueBoolQuery) QueryProduct() *ProductQuery {
	query := (&ProductClient{config: avbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := avbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := avbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(attributevaluebool.Table, attributevaluebool.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attributevaluebool.ProductTable, attributevaluebool.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(avbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AttributeValueBool entity from the query.
// Returns a *NotFoundError when no AttributeValueBool was found.
func (avbq *AttributeValueBoolQuery) First(ctx context.Context) (*AttributeValueBool, error) {
	nodes, err := avbq.Limit(1).All(setContextOp(ctx, avbq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{attributevaluebool.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (avbq *AttributeValueBoolQuery) FirstX(ctx context.Context) *AttributeValueBool {
	node, err := avbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AttributeValueBool ID from the query.
// Returns a *NotFoundError when no AttributeValueBool ID was found.
func (avbq *AttributeValueBoolQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = avbq.Limit(1).IDs(setContextOp(ctx, avbq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{attributevaluebool.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (avbq *AttributeValueBoolQuery) FirstIDX(ctx context.Context) int {
	id, err := avbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AttributeValueBool entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AttributeValueBool entity is found.
// Returns a *NotFoundError when no AttributeValueBool entities are found.
func (avbq *AttributeValueBoolQuery) Only(ctx context.Context) (*AttributeValueBool, error) {
	nodes, err := avbq.Limit(2).All(setContextOp(ctx, avbq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{attributevaluebool.Label}
	default:
		return nil, &NotSingularError{attributevaluebool.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (avbq *AttributeValueBoolQuery) OnlyX(ctx context.Context) *AttributeValueBool {
	node, err := avbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AttributeValueBool ID in the query.
// Returns a *NotSingularError when more than one AttributeValueBool ID is found.
// Returns a *NotFoundError when no entities are found.
func (avbq *AttributeValueBoolQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = avbq.Limit(2).IDs(setContextOp(ctx, avbq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{attributevaluebool.Label}
	default:
		err = &NotSingularError{attributevaluebool.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (avbq *AttributeValueBoolQuery) OnlyIDX(ctx context.Context) int {
	id, err := avbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AttributeValueBools.
func (avbq *AttributeValueBoolQuery) All(ctx context.Context) ([]*AttributeValueBool, error) {
	ctx = setContextOp(ctx, avbq.ctx, "All")
	if err := avbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AttributeValueBool, *AttributeValueBoolQuery]()
	return withInterceptors[[]*AttributeValueBool](ctx, avbq, qr, avbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (avbq *AttributeValueBoolQuery) AllX(ctx context.Context) []*AttributeValueBool {
	nodes, err := avbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AttributeValueBool IDs.
func (avbq *AttributeValueBoolQuery) IDs(ctx context.Context) (ids []int, err error) {
	if avbq.ctx.Unique == nil && avbq.path != nil {
		avbq.Unique(true)
	}
	ctx = setContextOp(ctx, avbq.ctx, "IDs")
	if err = avbq.Select(attributevaluebool.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (avbq *AttributeValueBoolQuery) IDsX(ctx context.Context) []int {
	ids, err := avbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (avbq *AttributeValueBoolQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, avbq.ctx, "Count")
	if err := avbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, avbq, querierCount[*AttributeValueBoolQuery](), avbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (avbq *AttributeValueBoolQuery) CountX(ctx context.Context) int {
	count, err := avbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (avbq *AttributeValueBoolQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, avbq.ctx, "Exist")
	switch _, err := avbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (avbq *AttributeValueBoolQuery) ExistX(ctx context.Context) bool {
	exist, err := avbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AttributeValueBoolQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (avbq *AttributeValueBoolQuery) Clone() *AttributeValueBoolQuery {
	if avbq == nil {
		return nil
	}
	return &AttributeValueBoolQuery{
		config:        avbq.config,
		ctx:           avbq.ctx.Clone(),
		order:         append([]attributevaluebool.OrderOption{}, avbq.order...),
		inters:        append([]Interceptor{}, avbq.inters...),
		predicates:    append([]predicate.AttributeValueBool{}, avbq.predicates...),
		withAttribute: avbq.withAttribute.Clone(),
		withProduct:   avbq.withProduct.Clone(),
		// clone intermediate query.
		sql:  avbq.sql.Clone(),
		path: avbq.path,
	}
}

// WithAttribute tells the query-builder to eager-load the nodes that are connected to
// the "attribute" edge. The optional arguments are used to configure the query builder of the edge.
func (avbq *AttributeValueBoolQuery) WithAttribute(opts ...func(*AttributeQuery)) *AttributeValueBoolQuery {
	query := (&AttributeClient{config: avbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	avbq.withAttribute = query
	return avbq
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (avbq *AttributeValueBoolQuery) WithProduct(opts ...func(*ProductQuery)) *AttributeValueBoolQuery {
	query := (&ProductClient{config: avbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	avbq.withProduct = query
	return avbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AttributeID int `json:"attribute_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AttributeValueBool.Query().
//		GroupBy(attributevaluebool.FieldAttributeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (avbq *AttributeValueBoolQuery) GroupBy(field string, fields ...string) *AttributeValueBoolGroupBy {
	avbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AttributeValueBoolGroupBy{build: avbq}
	grbuild.flds = &avbq.ctx.Fields
	grbuild.label = attributevaluebool.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AttributeID int `json:"attribute_id,omitempty"`
//	}
//
//	client.AttributeValueBool.Query().
//		Select(attributevaluebool.FieldAttributeID).
//		Scan(ctx, &v)
func (avbq *AttributeValueBoolQuery) Select(fields ...string) *AttributeValueBoolSelect {
	avbq.ctx.Fields = append(avbq.ctx.Fields, fields...)
	sbuild := &AttributeValueBoolSelect{AttributeValueBoolQuery: avbq}
	sbuild.label = attributevaluebool.Label
	sbuild.flds, sbuild.scan = &avbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AttributeValueBoolSelect configured with the given aggregations.
func (avbq *AttributeValueBoolQuery) Aggregate(fns ...AggregateFunc) *AttributeValueBoolSelect {
	return avbq.Select().Aggregate(fns...)
}

func (avbq *AttributeValueBoolQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range avbq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, avbq); err != nil {
				return err
			}
		}
	}
	for _, f := range avbq.ctx.Fields {
		if !attributevaluebool.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if avbq.path != nil {
		prev, err := avbq.path(ctx)
		if err != nil {
			return err
		}
		avbq.sql = prev
	}
	return nil
}

func (avbq *AttributeValueBoolQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AttributeValueBool, error) {
	var (
		nodes       = []*AttributeValueBool{}
		_spec       = avbq.querySpec()
		loadedTypes = [2]bool{
			avbq.withAttribute != nil,
			avbq.withProduct != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AttributeValueBool).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AttributeValueBool{config: avbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, avbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := avbq.withAttribute; query != nil {
		if err := avbq.loadAttribute(ctx, query, nodes, nil,
			func(n *AttributeValueBool, e *Attribute) { n.Edges.Attribute = e }); err != nil {
			return nil, err
		}
	}
	if query := avbq.withProduct; query != nil {
		if err := avbq.loadProduct(ctx, query, nodes, nil,
			func(n *AttributeValueBool, e *Product) { n.Edges.Product = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (avbq *AttributeValueBoolQuery) loadAttribute(ctx context.Context, query *AttributeQuery, nodes []*AttributeValueBool, init func(*AttributeValueBool), assign func(*AttributeValueBool, *Attribute)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AttributeValueBool)
	for i := range nodes {
		fk := nodes[i].AttributeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(attribute.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "attribute_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (avbq *AttributeValueBoolQuery) loadProduct(ctx context.Context, query *ProductQuery, nodes []*AttributeValueBool, init func(*AttributeValueBool), assign func(*AttributeValueBool, *Product)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AttributeValueBool)
	for i := range nodes {
		fk := nodes[i].ProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(product.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (avbq *AttributeValueBoolQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := avbq.querySpec()
	_spec.Node.Columns = avbq.ctx.Fields
	if len(avbq.ctx.Fields) > 0 {
		_spec.Unique = avbq.ctx.Unique != nil && *avbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, avbq.driver, _spec)
}

func (avbq *AttributeValueBoolQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(attributevaluebool.Table, attributevaluebool.Columns, sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt))
	_spec.From = avbq.sql
	if unique := avbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if avbq.path != nil {
		_spec.Unique = true
	}
	if fields := avbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributevaluebool.FieldID)
		for i := range fields {
			if fields[i] != attributevaluebool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if avbq.withAttribute != nil {
			_spec.Node.AddColumnOnce(attributevaluebool.FieldAttributeID)
		}
		if avbq.withProduct != nil {
			_spec.Node.AddColumnOnce(attributevaluebool.FieldProductID)
		}
	}
	if ps := avbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := avbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := avbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := avbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (avbq *AttributeValueBoolQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(avbq.driver.Dialect())
	t1 := builder.Table(attributevaluebool.Table)
	columns := avbq.ctx.Fields
	if len(columns) == 0 {
		columns = attributevaluebool.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if avbq.sql != nil {
		selector = avbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if avbq.ctx.Unique != nil && *avbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range avbq.predicates {
		p(selector)
	}
	for _, p := range avbq.order {
		p(selector)
	}
	if offset := avbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := avbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AttributeValueBoolGroupBy is the group-by builder for AttributeValueBool entities.
type AttributeValueBoolGroupBy struct {
	selector
	build *AttributeValueBoolQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (avbgb *AttributeValueBoolGroupBy) Aggregate(fns ...AggregateFunc) *AttributeValueBoolGroupBy {
	avbgb.fns = append(avbgb.fns, fns...)
	return avbgb
}

// Scan applies the selector query and scans the result into the given value.
func (avbgb *AttributeValueBoolGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, avbgb.build.ctx, "GroupBy")
	if err := avbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AttributeValueBoolQuery, *AttributeValueBoolGroupBy](ctx, avbgb.build, avbgb, avbgb.build.inters, v)
}

func (avbgb *AttributeValueBoolGroupBy) sqlScan(ctx context.Context, root *AttributeValueBoolQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(avbgb.fns))
	for _, fn := range avbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*avbgb.flds)+len(avbgb.fns))
		for _, f := range *avbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*avbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := avbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AttributeValueBoolSelect is the builder for selecting fields of AttributeValueBool entities.
type AttributeValueBoolSelect struct {
	*AttributeValueBoolQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (avbs *AttributeValueBoolSelect) Aggregate(fns ...AggregateFunc) *AttributeValueBoolSelect {
	avbs.fns = append(avbs.fns, fns...)
	return avbs
}

// Scan applies the selector query and scans the result into the given value.
func (avbs *AttributeValueBoolSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, avbs.ctx, "Select")
	if err := avbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AttributeValueBoolQuery, *AttributeValueBoolSelect](ctx, avbs.AttributeValueBoolQuery, avbs, avbs.inters, v)
}

func (avbs *AttributeValueBoolSelect) sqlScan(ctx context.Context, root *AttributeValueBoolQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(avbs.fns))
	for _, fn := range avbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*avbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := avbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
