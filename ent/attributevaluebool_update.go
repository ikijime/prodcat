// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prodcat/ent/attribute"
	"prodcat/ent/attributevaluebool"
	"prodcat/ent/predicate"
	"prodcat/ent/product"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttributeValueBoolUpdate is the builder for updating AttributeValueBool entities.
type AttributeValueBoolUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeValueBoolMutation
}

// Where appends a list predicates to the AttributeValueBoolUpdate builder.
func (avbu *AttributeValueBoolUpdate) Where(ps ...predicate.AttributeValueBool) *AttributeValueBoolUpdate {
	avbu.mutation.Where(ps...)
	return avbu
}

// SetAttributeID sets the "attribute_id" field.
func (avbu *AttributeValueBoolUpdate) SetAttributeID(i int) *AttributeValueBoolUpdate {
	avbu.mutation.SetAttributeID(i)
	return avbu
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (avbu *AttributeValueBoolUpdate) SetNillableAttributeID(i *int) *AttributeValueBoolUpdate {
	if i != nil {
		avbu.SetAttributeID(*i)
	}
	return avbu
}

// SetProductID sets the "product_id" field.
func (avbu *AttributeValueBoolUpdate) SetProductID(i int) *AttributeValueBoolUpdate {
	avbu.mutation.SetProductID(i)
	return avbu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (avbu *AttributeValueBoolUpdate) SetNillableProductID(i *int) *AttributeValueBoolUpdate {
	if i != nil {
		avbu.SetProductID(*i)
	}
	return avbu
}

// SetValue sets the "value" field.
func (avbu *AttributeValueBoolUpdate) SetValue(b bool) *AttributeValueBoolUpdate {
	avbu.mutation.SetValue(b)
	return avbu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (avbu *AttributeValueBoolUpdate) SetNillableValue(b *bool) *AttributeValueBoolUpdate {
	if b != nil {
		avbu.SetValue(*b)
	}
	return avbu
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (avbu *AttributeValueBoolUpdate) SetAttribute(a *Attribute) *AttributeValueBoolUpdate {
	return avbu.SetAttributeID(a.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (avbu *AttributeValueBoolUpdate) SetProduct(p *Product) *AttributeValueBoolUpdate {
	return avbu.SetProductID(p.ID)
}

// Mutation returns the AttributeValueBoolMutation object of the builder.
func (avbu *AttributeValueBoolUpdate) Mutation() *AttributeValueBoolMutation {
	return avbu.mutation
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (avbu *AttributeValueBoolUpdate) ClearAttribute() *AttributeValueBoolUpdate {
	avbu.mutation.ClearAttribute()
	return avbu
}

// ClearProduct clears the "product" edge to the Product entity.
func (avbu *AttributeValueBoolUpdate) ClearProduct() *AttributeValueBoolUpdate {
	avbu.mutation.ClearProduct()
	return avbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (avbu *AttributeValueBoolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, avbu.sqlSave, avbu.mutation, avbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avbu *AttributeValueBoolUpdate) SaveX(ctx context.Context) int {
	affected, err := avbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (avbu *AttributeValueBoolUpdate) Exec(ctx context.Context) error {
	_, err := avbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avbu *AttributeValueBoolUpdate) ExecX(ctx context.Context) {
	if err := avbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avbu *AttributeValueBoolUpdate) check() error {
	if _, ok := avbu.mutation.AttributeID(); avbu.mutation.AttributeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueBool.attribute"`)
	}
	if _, ok := avbu.mutation.ProductID(); avbu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueBool.product"`)
	}
	return nil
}

func (avbu *AttributeValueBoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := avbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributevaluebool.Table, attributevaluebool.Columns, sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt))
	if ps := avbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avbu.mutation.Value(); ok {
		_spec.SetField(attributevaluebool.FieldValue, field.TypeBool, value)
	}
	if avbu.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.AttributeTable,
			Columns: []string{attributevaluebool.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avbu.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.AttributeTable,
			Columns: []string{attributevaluebool.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avbu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.ProductTable,
			Columns: []string{attributevaluebool.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avbu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.ProductTable,
			Columns: []string{attributevaluebool.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, avbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributevaluebool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	avbu.mutation.done = true
	return n, nil
}

// AttributeValueBoolUpdateOne is the builder for updating a single AttributeValueBool entity.
type AttributeValueBoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeValueBoolMutation
}

// SetAttributeID sets the "attribute_id" field.
func (avbuo *AttributeValueBoolUpdateOne) SetAttributeID(i int) *AttributeValueBoolUpdateOne {
	avbuo.mutation.SetAttributeID(i)
	return avbuo
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (avbuo *AttributeValueBoolUpdateOne) SetNillableAttributeID(i *int) *AttributeValueBoolUpdateOne {
	if i != nil {
		avbuo.SetAttributeID(*i)
	}
	return avbuo
}

// SetProductID sets the "product_id" field.
func (avbuo *AttributeValueBoolUpdateOne) SetProductID(i int) *AttributeValueBoolUpdateOne {
	avbuo.mutation.SetProductID(i)
	return avbuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (avbuo *AttributeValueBoolUpdateOne) SetNillableProductID(i *int) *AttributeValueBoolUpdateOne {
	if i != nil {
		avbuo.SetProductID(*i)
	}
	return avbuo
}

// SetValue sets the "value" field.
func (avbuo *AttributeValueBoolUpdateOne) SetValue(b bool) *AttributeValueBoolUpdateOne {
	avbuo.mutation.SetValue(b)
	return avbuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (avbuo *AttributeValueBoolUpdateOne) SetNillableValue(b *bool) *AttributeValueBoolUpdateOne {
	if b != nil {
		avbuo.SetValue(*b)
	}
	return avbuo
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (avbuo *AttributeValueBoolUpdateOne) SetAttribute(a *Attribute) *AttributeValueBoolUpdateOne {
	return avbuo.SetAttributeID(a.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (avbuo *AttributeValueBoolUpdateOne) SetProduct(p *Product) *AttributeValueBoolUpdateOne {
	return avbuo.SetProductID(p.ID)
}

// Mutation returns the AttributeValueBoolMutation object of the builder.
func (avbuo *AttributeValueBoolUpdateOne) Mutation() *AttributeValueBoolMutation {
	return avbuo.mutation
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (avbuo *AttributeValueBoolUpdateOne) ClearAttribute() *AttributeValueBoolUpdateOne {
	avbuo.mutation.ClearAttribute()
	return avbuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (avbuo *AttributeValueBoolUpdateOne) ClearProduct() *AttributeValueBoolUpdateOne {
	avbuo.mutation.ClearProduct()
	return avbuo
}

// Where appends a list predicates to the AttributeValueBoolUpdate builder.
func (avbuo *AttributeValueBoolUpdateOne) Where(ps ...predicate.AttributeValueBool) *AttributeValueBoolUpdateOne {
	avbuo.mutation.Where(ps...)
	return avbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (avbuo *AttributeValueBoolUpdateOne) Select(field string, fields ...string) *AttributeValueBoolUpdateOne {
	avbuo.fields = append([]string{field}, fields...)
	return avbuo
}

// Save executes the query and returns the updated AttributeValueBool entity.
func (avbuo *AttributeValueBoolUpdateOne) Save(ctx context.Context) (*AttributeValueBool, error) {
	return withHooks(ctx, avbuo.sqlSave, avbuo.mutation, avbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avbuo *AttributeValueBoolUpdateOne) SaveX(ctx context.Context) *AttributeValueBool {
	node, err := avbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (avbuo *AttributeValueBoolUpdateOne) Exec(ctx context.Context) error {
	_, err := avbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avbuo *AttributeValueBoolUpdateOne) ExecX(ctx context.Context) {
	if err := avbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avbuo *AttributeValueBoolUpdateOne) check() error {
	if _, ok := avbuo.mutation.AttributeID(); avbuo.mutation.AttributeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueBool.attribute"`)
	}
	if _, ok := avbuo.mutation.ProductID(); avbuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeValueBool.product"`)
	}
	return nil
}

func (avbuo *AttributeValueBoolUpdateOne) sqlSave(ctx context.Context) (_node *AttributeValueBool, err error) {
	if err := avbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributevaluebool.Table, attributevaluebool.Columns, sqlgraph.NewFieldSpec(attributevaluebool.FieldID, field.TypeInt))
	id, ok := avbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeValueBool.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := avbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributevaluebool.FieldID)
		for _, f := range fields {
			if !attributevaluebool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributevaluebool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := avbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avbuo.mutation.Value(); ok {
		_spec.SetField(attributevaluebool.FieldValue, field.TypeBool, value)
	}
	if avbuo.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.AttributeTable,
			Columns: []string{attributevaluebool.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avbuo.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.AttributeTable,
			Columns: []string{attributevaluebool.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if avbuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.ProductTable,
			Columns: []string{attributevaluebool.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := avbuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attributevaluebool.ProductTable,
			Columns: []string{attributevaluebool.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttributeValueBool{config: avbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, avbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributevaluebool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	avbuo.mutation.done = true
	return _node, nil
}
