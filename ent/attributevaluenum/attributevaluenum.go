// Code generated by ent, DO NOT EDIT.

package attributevaluenum

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attributevaluenum type in the database.
	Label = "attribute_value_num"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVariantID holds the string denoting the variant_id field in the database.
	FieldVariantID = "variant_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// EdgeVariant holds the string denoting the variant edge name in mutations.
	EdgeVariant = "variant"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// Table holds the table name of the attributevaluenum in the database.
	Table = "attribute_value_nums"
	// VariantTable is the table that holds the variant relation/edge.
	VariantTable = "attribute_value_nums"
	// VariantInverseTable is the table name for the AttributeVariantNum entity.
	// It exists in this package in order to avoid circular dependency with the "attributevariantnum" package.
	VariantInverseTable = "attribute_variant_nums"
	// VariantColumn is the table column denoting the variant relation/edge.
	VariantColumn = "variant_id"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "attribute_value_nums"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_id"
)

// Columns holds all SQL columns for attributevaluenum fields.
var Columns = []string{
	FieldID,
	FieldVariantID,
	FieldProductID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AttributeValueNum queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVariantID orders the results by the variant_id field.
func ByVariantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVariantID, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByVariantField orders the results by variant field.
func ByVariantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVariantStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductField orders the results by product field.
func ByProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), sql.OrderByField(field, opts...))
	}
}
func newVariantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VariantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VariantTable, VariantColumn),
	)
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
	)
}
